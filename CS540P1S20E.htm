<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.19692882272242407" type="model" defer></script>
<script src="CS540.js?0.8668705478922362" type="model" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2020 Epic Section</h1>
</div> 
<div id="content">
<script type="module"> import {p1s20e} from "./CS540.js"; p1s20e() </script> <br>
<a href="CS540P2S20E.htm">Next: P2</a> <br>
<br>
Back to week 1 page: <a href="CS540W1S20E.htm">Link</a> <br>
Back to week 2 page: <a href="CS540W2S20E.htm">Link</a> <br>
<br>
<script src="mnist_test.js"></script>
Official Due Date: June 7 <br>
<br>
<h2>Programming Problem Instruction</h2>
&bull; Enter your ID (the wisc email ID without @wisc.edu) here: <input type="text" id="id" value="" size="20"> and click <button id="button_0">Confirm</button> <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <br>
&bull; The same ID should generate the same set of parameters. Your answers are not saved when you close the browser. You could either copy and paste your console output into the text boxes or print your output to text files (.txt) and load them using the button above the text boxes. <br>
&bull; Please report any bugs on Piazza. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
&bull; (Introduction) In this project, you will build a logistic regression model and a neural network to classify hand-written digits. Your models should take pixel intensities of images as inputs and output which digits the images display. <br>
<br>
&bull; (Part 1) Read and download the training set images and labels from <a href="http://yann.lecun.com/exdb/mnist/index.html" target="_blank">MNIST</a> or <a href="https://pjreddie.com/projects/mnist-in-csv/" target="_blank">CSV Files</a> (easier to read) or the same dataset in another format from other places. <br>
<br>
&bull; (Part 1) Extract the training set data of the digits <span id="d1_0"></span> (label it 0) and <span id="d2_0"></span> (label it 1). Suppose there are \(n\) images in your training set, you should create an \(n \times 784\) feature matrix \(x\) and an \(n \times 1\) vector of labels \(y\). Please rescale so that the feature vectors contain only numbers between 0 and 1. You can do this by dividing all the numbers by 255. <br>
(Hint: the training images contain \(28 \times 28 = 784\) pixels, and each pixel corresponds to an input unit.) <br>
<br>
&bull; (Part 1) Train a logistic regression on the dataset and plot the weights in a 28 by 28 grid. <br>
<br>
&bull; (Part 1) Predict the new images in the following test set. The predictions should be one of 0 or 1. <br>
<textarea id="test_0" rows="2" cols="20"></textarea> <br>
Note: this field may take a few seconds to load. If you downloaded this before May 21, please download it again, line 100 contains a "/n" in place of a "\n". <br>
You can either use the <button id="button_1">Download</button> button to download a text file, or copy and paste from the text box into Excel or a csv file. Please do not change the content of the text box. <br>
<br>
&bull; (Part 2) Train a neural network with one hidden layer. The number of hidden units should be half of the number of input units (here, the number of input units is 784, so the number of hiddens should be 392). The activation function you should use is logistic in both layers. <br>
<br>
&bull; (Part 2) Predict the new images in the same test set. The predictions should be either 0 or 1. <br>
<br>
<h2>Question 1 [<span id="total_1">1</span> points]</h2>
&bull; (training) Enter the feature vector of any one training image (784 numbers, rounded to 2 decimal places, in one line, comma separated): <br>
<input type="file", id="training_input", accept='text/plain'><br><textarea id="training"></textarea> <br>
Plot the image to make sure you entered the vector correctly: <button id="button_2">Plot</button> <br>
<canvas id="digit" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="digit_state"> </span> <br>
<span hidden id="answer_1"></span> <br>
<br>
<h2>Question 2 [<span id="total_2">1</span> points]</h2>
&bull; (log_weights) Enter the logistic regression weights and biases (784 + 1 numbers, rounded to 4 decimal places, in one line, comma separated), the bias term should be the last number: <br>
<input type="file", id="log_weights_input", accept='text/plain'><br><textarea id="log_weights"></textarea> <br>
(Note: please do not normalize the weights, ignore this instruction from an earlier incorrect version.) <br>
<button id="button_3">Plot</button> <br>
<canvas id="weights" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="weights_state"> </span> <br>
<span hidden id="answer_2"></span> <br>
<br>
<h2>Question 3 [<span id="total_3">10</span> points]</h2>
&bull; (log_act) Enter the activation values on the test set (200 numbers between 0 and 1, rounded to 2 decimal places, in one line, comma separated): <br>
<input type="file", id="log_act_input", accept='text/plain'><br><textarea id="log_act"></textarea> <br>
<span hidden id="answer_3"></span> <br>
<br>
<h2>Question 4 [<span id="total_4">10</span> points]</h2>
&bull; (log_pred) Enter the predicted values on the test set (200 integers, 0 or 1, prediction, in one line): <br>
<input type="file", id="log_pred_input", accept='text/plain'><br><textarea id="log_pred"></textarea> <br>
<span hidden id="answer_4"></span> <br>
<br>
<h2>Question 5 [<span id="total_5">1</span> points]</h2>
&bull; (in_weights) Enter the first layer weights and biases (784 + 1 lines, each line containing 392 numbers, rounded to 4 decimal places, comma separated). The bias terms should be on the last line: <br>
<input type="file", id="in_weights_input", accept='text/plain'><br><textarea id="in_weights"></textarea> <br>
(Hint: for the first 784 lines, line i element j represents the weight from input unit i to hidden unit j, and for the last line, element j represents the bias term for the hidden unit j.) <br>
<span hidden id="answer_5"></span> <br>
<br>
<h2>Question 6 [<span id="total_6">1</span> points]</h2>
&bull; (out_weights) Enter the second layer weights (392 + 1 numbers, rounded to 4 decimal places, in one line, comma separated). The bias terms should be on the last number: <br>
<input type="file", id="out_weights_input", accept='text/plain'><br><textarea id="out_weights"></textarea> <br>
<span hidden id="answer_6"></span> <br>
<br>
<h2>Question 7 [<span id="total_7">10</span> points]</h2>
&bull; (nn_act) Enter the second layer activation values on the test set (200 numbers between 0 and 1, rounded to 2 decimal places, in one line, comma separated): <br>
<input type="file", id="nn_act_input", accept='text/plain'><br><textarea id="nn_act"></textarea> <br>
<span hidden id="answer_7"></span> <br>
<br>
<h2>Question 8 [<span id="total_8">10</span> points]</h2>
&bull; (nn_pred) Enter the predicted values on the test set (200 integers, 0 or 1, prediction, in one line): <br>
<input type="file", id="nn_pred_input", accept='text/plain'><br><textarea id="nn_pred"></textarea> <br>
<span hidden id="answer_8"></span> <br>
<br>
<h2>Question 9 [<span id="total_9">1</span> points]</h2>
&bull; (incorrect) Enter the feature vector of one test image that is labelled incorrectly by your network (784 numbers in one line, rounded to 2 decimal places, comma separated). If none of the test set images are labelled incorrectly, you are probably overfitting or you are training on the test set: enter the feature vector that your network is most uncertain of (the second layer activation is the closest to 0.5). <br>
<input type="file", id="incorrect_input", accept='text/plain'><br><textarea id="incorrect"></textarea> <br>
Plot the image: <button id="button_4">Plot</button> <br>
<canvas id="image" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="image_state"> </span> <br>
<span hidden id="answer_9"></span> <br>
<br>
<h2>Question 10 [<span id="total_10">1</span> points]</h2>
&bull; Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the question that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
<br>
<h2>Grade</h2>
<button id="button_5">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
&bull; Warning: grading may take around 10 to 20 seconds. Please be patient and do not click "Grade" multiple times. <br>
<br>
&bull; Please copy and paste the text between the *****s (not including the *****s) and submit it on Canvas, P1. <br>
&bull; Please submit your code and outputs on Canvas, P1S. <br>
&bull; You could also save your outputs as a single text file using the button <button id="button_6">Download</button> and submit this to P1S (with your code). <br>
&bull; Warning: the load button does not function properly for all questions, please recheck everything after you load. You could load your answers using the button <button id="button_7">Load</button> from the text field: <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
&bull; Saving and loading may take around 10 to 20 seconds. Please be patient and do not click the buttons multiple times. <br>
<br>
<h2>Hints and Solutions (frequently updated)</h2>
&bull; Please do not normalize the weights. An earlier version of the instruction is incorrect. <br>
&bull; Use stochastic gradient descent if your algorithm does not converge quickly within 5 minutes. <br>
&bull; The algorithms are outlined in the lecture slides: <a href="CS540/CS540_Lecture_2_P.pdf">Slides</a>, pages 29 and 30 for Part 1, and <a href="CS540/CS540_Lecture_3_P.pdf">Slides</a>, pages 30, 31, 32, and 33 contain the algorithm, but pages 26 and 27 are more appropriate for this homework. There is no need to implement the delta thing. <br>
&bull; To speed up for loops in Python, see: <a href="https://towardsdatascience.com/vectorization-implementation-in-machine-learning-ca652920c55d" target="_blank">Link</a> for vectorization. <br>
&bull; The main purpose of the programming homework is to practice implementing mathematical algorithm given the formulas. Using packages and libraries to preprocess and read the data is okay, but you should not use packages and libraries for logistic regression and neural network. <br>
&bull; I recorded a video talking about P1 and how it is graded: <a href="https://youtu.be/8BSqdFiJVZs" target="_blank">Link</a>. In case you are curious, I explained how the auto-grading scripts (JavaScript) grade P1 and M1. You do not have to watch it to solve P1. <br>
&bull; You can also look at last year's P1 and P2 hints: <a href="http://pages.cs.wisc.edu/~yw/CS540/CS540_P1.pdf" target="_blank">P1</a>, <a href="http://pages.cs.wisc.edu/~yw/CS540/CS540_P2.pdf" target="_blank">P2</a>. The questions and requirements are different so use it with caution. <br>
&bull; A sample solution in Java and Python is posted below. <br>
Important notes:&nbsp; <br>
(1) ReLU activation is used in the neural network solution, you need to change the formula to logistic activations and you need to change the gradient descent formula too! For the logistic regression, the activation functions and gradient descent steps are correct. <br>
(2) You need to adjust the learning rate according to the training set you are given! Not all learning rates work for all problems, especially for neural networks. <br>
(3) You need to figure out which variables to output yourself. The outputs from the solution are use for debugging purposes only. <br>
(4) You are allowed to copy and use parts of the TA's solution without attribution. You are allowed to use code from other people and from the Internet, but you must state in the comments clearly where they come from! <br>
<br>
Java and Python code by Hugh Liu: <a href="https://git.doit.wisc.edu/YLIU785/ta540_2020summer/-/tree/master/P1_student" target="_blank">Link</a>. <br>
<script type="module"> 
import {enter_button, gen_questions, download_file, read_file, plot_image_page, grade, download_blanks, load_blanks_page} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
document.getElementById("button_1").onclick = () => download_file("@test_0", "test");
document.getElementById("training_input").onchange = () => read_file(event, "training");
document.getElementById("button_2").onclick = () => plot_image_page("@training", "@digit", "28", "28");
document.getElementById("log_weights_input").onchange = () => read_file(event, "log_weights");
document.getElementById("button_3").onclick = () => plot_image_page("@log_weights", "@weights", "28", "28");
document.getElementById("log_act_input").onchange = () => read_file(event, "log_act");
document.getElementById("log_pred_input").onchange = () => read_file(event, "log_pred");
document.getElementById("in_weights_input").onchange = () => read_file(event, "in_weights");
document.getElementById("out_weights_input").onchange = () => read_file(event, "out_weights");
document.getElementById("nn_act_input").onchange = () => read_file(event, "nn_act");
document.getElementById("nn_pred_input").onchange = () => read_file(event, "nn_pred");
document.getElementById("incorrect_input").onchange = () => read_file(event, "incorrect");
document.getElementById("button_4").onclick = () => plot_image_page("@incorrect", "@image", "28", "28");
document.getElementById("button_5").onclick = () => grade();
document.getElementById("button_6").onclick = () => download_blanks("@id;@training;@log_weights;@log_act;@log_pred;@in_weights;@out_weights;@nn_act;@nn_pred;@incorrect;@answer_10", "P1");
document.getElementById("button_7").onclick = () => load_blanks_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: May 27, 2021 at 10:24 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S20E.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540W1S20E.htm">Week 1 </a></li>
<li><a href="CS540W2S20E.htm">Week 2 </a></li>
<li><a href="CS540W3S20E.htm">Week 3 </a></li>
<li><a href="CS540W4S20E.htm">Week 4 </a></li>
<li><a href="CS540W5S20E.htm">Week 5 </a></li>
<li><a href="CS540W6S20E.htm">Week 6 </a></li>
<li><a href="CS540W7S20E.htm">Week 7 </a></li>
<li><a href="CS540W9S20E.htm">Week 9 </a></li>
<li><a href="CS540W10S20E.htm">Week 10 </a></li>
<li><a href="CS540W11S20E.htm">Week 11 </a></li>
<li><a href="CS540W12S20E.htm">Week 12 </a></li>
<li><a href="CS540W13S20E.htm">Week 13 </a></li>
</ul>
<li><a href="CS540W8S20E.htm">Midterm </a></li>
<li><a href="CS540W14S20E.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>
