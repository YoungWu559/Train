<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.7979917781489172" type="model" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2019</h1>
</div> 
<div id="content">
<a href="CS540W2S19.htm">Prev: W2</a> ; <a href="CS540W4S19.htm">Next: W4</a> <br>
<br>
<h2>Lecture Note</h2>
&bull; Slides <br>
Lecture 5: <a href="CS540/CS540_Lecture_5_P.pdf">Slides</a>, <a href="CS540/CS540_Lecture_5_C.pdf">With Quiz</a> <br>
Lecture 6: <a href="CS540/CS540_Lecture_6_P.pdf">Slides</a>, <a href="CS540/CS540_Lecture_6_C.pdf">With Quiz</a> <br>
Annotated Lecture 5 Section 1: <a href="CS540/CS540_Lecture_5_C1.pdf">Slides</a> <br>
Annotated Lecture 6 Section 1: <a href="CS540/CS540_Lecture_6_C1.pdf">Slides</a> <br>
Annotated Week 3 Section 2: <a href="CS540/CS540_Lecture_5_C2.pdf">Part I</a>, <a href="CS540/CS540_Lecture_6_C2.pdf">Part II</a> <br>
<br>
&bull; Typos and Mistakes <br>
Lecture 5, Examples of Kernel Matrix -- Discussion, last line, added squared root 2 in front of x_1 and x_2. <br>
<br>
&bull; Websites <br>
Support Vector Machine: <a href="http://vision.stanford.edu/teaching/cs231n-demos/linear-classify/" target="_blank">Link</a> <br>
Kernel Trick Video: <a href="https://www.youtube.com/watch?v=3liCbRZPrZA" target="_blank">Link</a> <br>
RBF Kernel SVM Demo: <a href="https://cs.stanford.edu/~karpathy/svmjs/demo/" target="_blank">Link</a> <br>
Favorite Fruit: <a href="https://www.digitaldecider.com/help/which-decision-tree-format-is-easier-for-humans/" target="_blank">Link</a> <br>
Decision Tree: <a href="http://www.r2d3.us/visual-intro-to-machine-learning-part-1/" target="_blank">Link</a> <br>
K Nearest Neighbor: <a href="http://vision.stanford.edu/teaching/cs231n-demos/knn/" target="_blank">Link</a> <br>
Map of Manhattan: <a href="https://www.google.com/maps/place/Manhattan,+New+York,+NY/@40.7590403,-74.0392709,12z/data=!3m1!4b1!4m5!3m4!1s0x89c2588f046ee661:0xa0b3281fcecc08c!8m2!3d40.7830603!4d-73.9712488" target="_blank">Link</a> <br>
Voronoi Diagram: <a href="https://www.christophermanning.org/projects/voronoi-diagram-with-force-directed-nodes-and-delaunay-links" target="_blank">Link</a> <br>
KD Tree: <a href="http://bl.ocks.org/llb4ll/8709363" target="_blank">Link</a> <br>
<br>
&bull; YouTube Videos <br>
How to find the margin expression for SVM? <a href="https://youtu.be/meBk6SpY_dI" target="_blank">Link</a> <br>
Why does the kernel trick work? <a href="https://youtu.be/C8LWqIDOWoc" target="_blank">Link</a> <br>
Example (Quiz): Compute SVM classifier <a href="https://youtu.be/A62WoCVY0Ew" target="_blank">Link</a> <br>
Example (Quiz): Kernel SVM for XOR operator <a href="https://youtu.be/yam1ytakQoI" target="_blank">Link</a> <br>
Example (Quiz): Kernel matrix to feature vector <a href="https://youtu.be/oeSbXw0YTxs" target="_blank">Link</a> <br>
Example (Quiz): Entropy computation <a href="https://youtu.be/A6I6hm2eW0U" target="_blank">Link</a> <br>
Example (Quiz): Decision tree for implication operator <a href="https://youtu.be/XzsTx16qAb8" target="_blank">Link</a> <br>
Example (Quiz): Three nearest neighbor <a href="https://youtu.be/_bLJ7yc7TiI" target="_blank">Link</a> <br>
<br>
<h2>Written (Math) Problems</h2>
Submit on Canvas: <a href="CS540/CS540_M3.pdf">PDF</a> <br>
<br>
<h2>Programming Problem</h2>
&bull; Short Instruction <br>
(1) Download the IMDB5000 Data from <a href="https://www.kaggle.com/tmdb/tmdb-movie-metadata" target="_blank">Kaggle</a> or <a href="https://data.world/data-society/imdb-5000-movie-dataset" target="_blank">Data World</a>. You can use Google Dataset search to find similar data set too: <a href="https://toolbox.google.com/datasetsearch" target="_blank">Google</a>. <br>
(2) Extract the columns for budget, genres, runtime (duration), vote_average (imdb_score), vote_count (num_voted_users) as features. Convert them into categorical data. For continuous or counting features, split using some uniform partition over the range: the number of categories can be numbers between 2 to 10 chosen arbitrarily. Remove all data points with missing features. (Note: please use the first genre in the list and combine some of the categories so that the total number of categories is less than or equal to 10.) <br>
(3) Extract the revenue (gross) column to use as y. Convert it into a binary variable according to your wisc ID: <br>
Type in your ID: <input type="text", id="id"> <button onclick="get()">GO</button><br>
<span id="out">Split the column according to: </span><br>&nbsp; <br>
<script>
function get() <br>
{ <br>
&nbsp; let id = document.getElementById("id").value; <br>
&nbsp; let len = id.length; <br>
&nbsp; if (len >= 1) <br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp; let a = id.charCodeAt(len - 1) % 10 + 1; <br>
&nbsp;&nbsp;&nbsp; document.getElementById("out").innerHTML = "Split the column according to: revenue <= " + a + "0 millions vs revenue > " + a + "0 millions"; <br>
&nbsp; } <br>
} <br>
</script>
(4) Train a decision stump (a decision tree with 1 split) for each feature and compare them using information gain. <br>
<br>
&bull; Files to submit <br>
(1) <u><b>output.txt</b></u> contains 5 lines, each line starts with the number of categories and the information gain due to the split, then list the number of positive and negative examples for each branch. (Positive example means an instance with label 1, and negative example means an instance with label 0.) For example, if originally, there are 2500 positive examples and 2500 negative examples, there are 5 categories that evenly split the positive and negative examples. Then the line should be 5, 0, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250. <br>
(2) <u><b>comments.txt</b></u> contains information on how to run your program, in particular, the names of the data files are required. <br>
(3) code. <br>
<br>
&bull; Things to try <br>
(1) Experiment with dividing the continuous variables into different number of categories. Try numbers between 2 and 10. <br>
(2) (Not required) You can try binary division for continuous variables at each data points (as in lectures) too. <br>
(3) (Not required) Build the decision tree. <br>
<br>
&bull; Longer Instruction <br>
The five lines should have the format: <br>
Number of categories for feature j, Information Gain for feature j, #(y=1 and X_j=0), #(y=0 and X_j = 0) , #(y=1 and X_j =1), #(y=0 and X_j = 1), ... #(y=1 and X_j=k), #(y=0 and X_j=k) <br>
The order should be: <br>
j = 1: budget <br>
j = 2: genres <br>
j = 3: runtime <br>
j = 4: vote_average <br>
j = 5: vote_count <br>
<br>
More (nonessential) details and hints: <a href="CS540/CS540_P3.pdf">PDF</a>. <br>
<br>
Type in one line of your output: <input type="text", id="ent"> <button onclick="cent()">GO</button><br>
<span id="cout">Result : </span><br>&nbsp; <br>
<script>
function cent() <br>
{ <br>
&nbsp; let ent = document.getElementById("ent").value.split(","); <br>
&nbsp; let bins = parseInt(ent[0]); <br>
&nbsp; if (ent.length < 2 + bins * 2) <br>
&nbsp; { <br>
&nbsp; 	document.getElementById("cout").innerHTML = "Result : Incorrect." <br>
&nbsp; } <br>
&nbsp; else <br>
&nbsp; { <br>
&nbsp; 	let info = Number(ent[1]); <br>
&nbsp;&nbsp;&nbsp; if (info < 0 || info > 0.5) <br>
&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById("cout").innerHTML = "Result : Incorrect." <br>
&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp; else <br>
&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let temp = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let y0 = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let y1 = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let t0 = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let hy = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let cy0x = []; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let cy1x = []; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let hyx = 0; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (let i = 2; i < bins * 2 + 2; i ++)&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp = parseInt(ent[i]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t0 += temp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i % 2 == 0) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y0 += temp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cy0x[(i - 2) / 2] = temp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y1 += temp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cy1x[(i - 3) / 2] = temp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hy = (-1.0 * y0 / t0 * Math.log(1.0 * y0 / t0) - 1.0 * y1 / t0 * Math.log(1.0 * y1 / t0)) / Math.log(2); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (let i = 0; i < bins; i ++) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cy0x[i] != 0) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyx -= 1.0 * cy0x[i] / t0 * Math.log(1.0 * cy0x[i] / (cy0x[i] + cy1x[i])); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cy1x[i] != 0) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyx -= 1.0 * cy1x[i] / t0 * Math.log(1.0 * cy1x[i] / (cy0x[i] + cy1x[i])) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyx = hyx / Math.log(2); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Math.abs(hy - hyx - info) < 0.0001) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById("cout").innerHTML = "Result : Correct"; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById("cout").innerHTML = "Result : Incorrect"; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp; } <br>
&nbsp; } <br>
} <br>
</script>
<br>
&bull; TAs' Solution <br>
(1) Java: <a href="https://git.doit.wisc.edu/SONGDECHAKRA/CS540-SU19" target="_blank">Link</a> written by Tan <br>
(2) Python: <a href="https://git.doit.wisc.edu/DANDI.CHEN/cs540_2019summer/tree/master/hw3" target="_blank">Link</a> written by Dandi <br>
Important note: You are not allowed to copy any code from the solution. <a href="https://theory.stanford.edu/~aiken/moss/" target="_blank">MOSS</a> will be used check for code similarity: changing just variable names and the spacing etc is still considered cheating. You can read and learn what the solution is doing but you MUST write all code yourself. The deadline for resubmission without 50 percent penalty is June 30. <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: November 10, 2019 at 9:39 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S19.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540W1S19.htm">Week 1 </a></li>
<li><a href="CS540W2S19.htm">Week 2 </a></li>
<li><a href="CS540W3S19.htm">Week 3 </a></li>
<li><a href="CS540W4S19.htm">Week 4 </a></li>
<li><a href="CS540W5S19.htm">Week 5 </a></li>
<li><a href="CS540W6S19.htm">Week 6 </a></li>
<li><a href="CS540W7S19.htm">Week 7 </a></li>
<li><a href="CS540W9S19.htm">Week 9 </a></li>
<li><a href="CS540W10S19.htm">Week 10 </a></li>
<li><a href="CS540W11S19.htm">Week 11 </a></li>
<li><a href="CS540W12S19.htm">Week 12 </a></li>
</ul>
<li><a href="CS540W8S19.htm">Midterm </a></li>
<li><a href="CS540W13S19.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>
