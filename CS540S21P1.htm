<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.8955166474854622" type="module" defer></script>
<script src="CS540.js?0.5141541960676996" type="module" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2021</h1>
</div> 
<div id="content">

<script type="module"> import {p1s21} from "./CS540.js"; p1s21() </script> <br>
Prev: <a href="CS540S21P1.htm">P1</a> Next: <a href="CS540S21P2.htm">P2</a> <br>
Back to week 1 page: <a href="CS540S21W1.htm">Link</a> <br>
<br>
<br>
<h2>P1 Programming Problem Instruction</h2>
&bull; Enter your ID (the wisc email ID without @wisc.edu) here: <input type="text" id="id" value="" size="20"> and click <button id="button_0">Confirm</button> (or hit enter key) <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <span hidden id="assignment">p1</span> <br>
&bull; The official deadline is July 4, but you can submit or resubmit without penalty until August 15. <br>
&bull; The same ID should generate the same set of questions. Your answers are not saved when you close the browser. You could either copy and paste or load your program outputs into the text boxes for individual questions or print all your outputs to a single text file and load it using the button at the bottom of the page. <br>
&bull; Please do not refresh the page: your answers will not be saved. <br>
&bull; You should implement the algorithms using the mathematical formulas from the slides. You can use packages and libraries to preprocess and read the data and format the outputs. It is not recommended that you use machine learning packages or libraries, but you will not lose points for doing so. <br>
&bull; Please report any bugs on Piazza. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
<script src="mnist_test.js"></script>
<span hidden id="store">1:training;2:log_weights;3:log_act;4:log_pred;5:in_weights;6:out_weights;7:nn_act;8:nn_pred;9:incorrect</span> <br>
&bull; (Introduction) In this project, you will build a logistic regression model and a neural network to classify hand-written digits. Your models should take pixel intensities of images as inputs and output which digits the images display. <br>
<br>
&bull; (Part 1) Read and download the training set images and labels from <a href="http://yann.lecun.com/exdb/mnist/index.html" target="_blank">MNIST</a> or <a href="https://pjreddie.com/projects/mnist-in-csv/" target="_blank">CSV Files</a> (easier to read) or the same dataset in another format from other places. <br>
<br>
&bull; (Part 1) Extract the training set data of the digits <span id="d1_0">?</span> (label it 0) and <span id="d2_0">?</span> (label it 1). Suppose there are \(n\) images in your training set, you should create an \(n \times 784\) feature matrix \(x\) and an \(n \times 1\) vector of labels \(y\). Please rescale so that the feature vectors contain only numbers between 0 and 1. You can do this by dividing all the numbers by 255. The training images contain \(28 \times 28 = 784\) pixels, and each pixel corresponds to an input unit.) <br>
<br>
&bull; (Part 1) Train a logistic regression on the dataset and plot the weights in a 28 by 28 grid. <br>
<br>
&bull; (Part 1) Predict the new images in the following test set. The predictions should be one of 0 or 1. <br>
<textarea id="test_0" rows="2" cols="20"></textarea> <br>
Note: this field may take a few seconds to load. You can either use the <button id="button_1">Download</button> button to download a text file, or copy and paste from the text box into Excel or a csv file <button id="button_2">Copy</button>. Please do not change the content of the text box. <br>
<br>
&bull; (Part 2) Train a neural network with one hidden layer. The number of hidden units should be square root of the number of input units (here, the number of input units is 784, so the number of hidden units should be 28). The activation function you should use is logistic in both layers. <br>
<br>
&bull; (Part 2) Predict the new images in the same test set. The predictions should be either 0 or 1. <br>
<br>
<h2>Question 1</h2>
&bull; [<span id="total_1">1</span> points] Enter the feature vector of any one training image (784 numbers, rounded to 2 decimal places, in one line, comma separated): <br>
<details>
<summary>Hint</summary>
&bull; When reading the CSV file, you should read only the lines corresponding to the digits you are classifying and create an n by 1 array \(y\) to store the first column (either 0 or 1), and create an n by m array \(x\) to store the remaining columns. <br>
&bull; Make sure that you rescale (by dividing by 255) so that the feature vectors contain only numbers between 0 and 1. <br>
</details>
<input type="file", id="training_input", accept='text/plain'><br><textarea id="training"></textarea> <br>
Plot the image to make sure you entered the vector correctly: <button id="button_3">Plot</button> <br>
<canvas id="digit" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="digit_state"> </span> <br>
<span hidden id="answer_1"></span> <br>
<br>
<h2>Question 2</h2>
&bull; [<span id="total_2">5</span> points] Enter the logistic regression weights and biases (784 + 1 numbers, rounded to 4 decimal places, in one line, comma separated), the bias term should be the last number: <br>
<details>
<summary>Hint</summary>
&bull; Create an m by 1 array \(w\) to store the weights and a number \(b\). Initialize them with random numbers between -1 and 1. (Initializing them with 0 is okay too, but it can make convergence slower.) <br>
&bull; Pick a learning rate \(\alpha\): the choice depends on the digits you are classifying, but you could start by trying \(\alpha = 0.1, 0.01, 0.001\) and look at how quickly the weights converge. <br>
&bull; Update \(w\) and \(b\) according the formula in the Lecture 2 slides: <br>
\(a_{i} = \dfrac{1}{1 + \exp\left(-\left(\left(\displaystyle\sum_{j=1}^{m} w_{j} x_{ij}\right) + b\right)\right)}\) for i = 1, ..., n, <br>
\(w_{j} = w_{j} - \alpha \displaystyle\sum_{i=1}^{n} \left(a_{i} - y_{i}\right) x_{ij}\) for j = 1, ..., m, <br>
\(b = b - \alpha \displaystyle\sum_{i=1}^{n} \left(a_{i} - y_{i}\right)\). <br>
&bull; Note: if you want to use stochastic gradient descent, you should shuffle the dataset before going through \(i\) and update: <br>
\(w_{j} = w_{j} - \alpha \left(a_{i} - y_{i}\right) x_{ij}\) for j = 1, ..., m, <br>
\(b = b - \alpha \left(a_{i} - y_{i}\right)\). <br>
See <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank">Wikipedia</a> for one algorithm to shuffle. <br>
&bull; Remember to compute the cost at each step and store the cost from the previous step: <br>
\(C = -\displaystyle\sum_{i=1}^{n} \left(y_{i} \log a_{i} + \left(1 - y_{i}\right) \log \left(1 - a_{i}\right)\right)\). <br>
&bull; Due to the problem that \(0 \log 0\) = NaN in many programming languages, the cost function should be written as \(C = \displaystyle\sum_{i} C_{i}\): <br>
\(C_{i} = -\log\left(1 - a_{i}\right)\) if \(y_{i} = 0\), <br>
and \(C_{i} = -\log a_{i}\) if \(y_{i} = 1\), <br>
and \(C_{i}\) = something very large (like 10000) if \(y_{i} = 0, a_{i} \approx 1\) or \(y_{i} = 1, a_{i} \approx 0\). <br>
&bull; Repeat the previous two steps until the decrease in \(C\) is smaller than something like 0.0001, or \(C\) is smaller than a fixed number like 1, or the number of iterations (epochs) is too large (say 1000). <br>
</details>
<input type="file", id="log_weights_input", accept='text/plain'><br><textarea id="log_weights"></textarea> <br>
<button id="button_4">Plot</button> <br>
<canvas id="weights" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="weights_state"> </span> <br>
<span hidden id="answer_2"></span> <br>
<br>
Now you can use your regression model to classify a digit you draw: <br>
<canvas id="canvas_log" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_log_state"> </span> <br>
<button id="button_5">Thin Pen</button> <button id="button_6">Thick Pen</button> <button id="button_7">Clear</button> <button id="button_8">Classify</button> <br>
Activation: <span id="act_log">?</span>, Class: <span id="class_log">?</span>, Digit: <span id="digit_log">?</span>. <br>
Corresponding feature vector: <textarea id="feature_log" rows="2" cols="20"></textarea> <button id="button_9">Download</button> <button id="button_10">Copy</button>. <br>
<br>
<h2>Question 3</h2>
&bull; [<span id="total_3">10</span> points] Enter the activation values on the test set (200 numbers between 0 and 1, rounded to 2 decimal places, in one line, comma separated): <br>
<details>
<summary>Hint</summary>
&bull; Read the test file: the first column is not \(y\), so just store everything in an array \(\hat{x}\). Remember to divide \(\hat{x}\) by 255. <br>
&bull; For each line \(\hat{x}_{i}\), compute the activation value by: <br>
\(a_{i} = \dfrac{1}{1 + \exp\left(-\left(\left(\displaystyle\sum_{j=1}^{m} w_{j} \hat{x}_{ij}\right) + b\right)\right)}\). <br>
</details>
<input type="file", id="log_act_input", accept='text/plain'><br><textarea id="log_act"></textarea> <br>
<span hidden id="answer_3"></span> <br>
<br>
<h2>Question 4</h2>
&bull; [<span id="total_4">10</span> points] Enter the predicted values on the test set (200 integers, 0 or 1, prediction, in one line): <br>
<details>
<summary>Hint</summary>
&bull; If \(a_{i} < 0.5\), the label is 0, and if \(a_{i} \geq&nbsp; 0.5\), the label is 1. <br>
</details>
<input type="file", id="log_pred_input", accept='text/plain'><br><textarea id="log_pred"></textarea> <br>
<span hidden id="answer_4"></span> <br>
<br>
<h2>Question 5</h2>
&bull; [<span id="total_5">5</span> points] Enter the first layer weights and biases (784 + 1 lines, each line containing 28 numbers, rounded to 4 decimal places, comma separated). The biases should be on the last line: for the first 784 lines, line i element j represents the weight from input unit i to hidden unit j, and for the last line, element j represents the bias for the hidden unit j: <br>
<details>
<summary>Hint</summary>
&bull; Let h be the number of hidden units. Create an m by h array \(w^{\left(1\right)}\) to store the weights for layer 1 and an h by 1 array \(b^{\left(1\right)}\) to store the biases for layer 1. Create an h by 1 array \(w^{\left(2\right)}\) to store the weights for layer 2 and a number \(b^{\left(2\right)}\) to store the bias for layer 2. Initialize them with random numbers between -1 and 1. (Initializing them with 0 is okay too, but it can make convergence slower.) <br>
&bull; Pick a learning rate \(\alpha\): the choice depends on the digits you are classifying, but you could start by trying \(\alpha = 0.1, 0.01, 0.001\) and look at how quickly the weights converge. <br>
&bull; Batch gradient descent is too slow: use stochastic gradient descent instead, you should shuffle the dataset before going through \(i\) and update \(w\) and \(b\) according the formula in the Lecture 3 or 4 slides (please check to make sure they are correct!): <br>
\(a^{\left(1\right)}_{ij} = \dfrac{1}{1 + \exp\left(- \left(\left(\displaystyle\sum_{j'=1}^{m} x_{ij'} w^{\left(1\right)}_{j'j}\right) + b^{\left(1\right)}_{j}\right)\right)}\) for j = 1, ..., h, <br>
\(a^{\left(2\right)}_{i} = \dfrac{1}{1 + \exp\left(- \left(\left(\displaystyle\sum_{j=1}^{h} a^{\left(1\right)}_{ij} w^{\left(2\right)}_{j}\right) + b^{\left(2\right)}\right)\right)}\), <br>
\(\dfrac{\partial C}{\partial w^{\left(1\right)}_{j'j}} = \left(a^{\left(2\right)}_{i} - y_{i}\right) a^{\left(2\right)}_{i} \left(1 - a^{\left(2\right)}_{i}\right) w_{j}^{\left(2\right)} a_{ij}^{\left(1\right)} \left(1 - a_{ij}^{\left(1\right)}\right) x_{ij'}\) for j' = 1, ..., m, j = 1, ..., h, <br>
\(\dfrac{\partial C}{\partial b^{\left(1\right)}_{j}} = \left(a^{\left(2\right)}_{i} - y_{i}\right) a^{\left(2\right)}_{i} \left(1 - a^{\left(2\right)}_{i}\right) w_{j}^{\left(2\right)} a_{ij}^{\left(1\right)} \left(1 - a_{ij}^{\left(1\right)}\right)\) for j = 1, ..., h, <br>
\(\dfrac{\partial C}{\partial w^{\left(2\right)}_{j}} = \left(a^{\left(2\right)}_{i} - y_{i}\right) a^{\left(2\right)}_{i} \left(1 - a^{\left(2\right)}_{i}\right) a_{ij}^{\left(1\right)}\) for j = 1, ..., h, <br>
\(\dfrac{\partial C}{\partial b^{\left(2\right)}} = \left(a^{\left(2\right)}_{i} - y_{i}\right) a^{\left(2\right)}_{i} \left(1 - a^{\left(2\right)}_{i}\right)\), <br>
\(w^{\left(1\right)}_{j' j} \leftarrow w^{\left(1\right)}_{j' j} - \alpha \dfrac{\partial C }{\partial w^{\left(1\right)}_{j' j}}\) for j' = 1, ..., m, j = 1, ..., h, <br>
\(b^{\left(1\right)}_{j} \leftarrow b^{\left(1\right)}_{j} - \alpha \dfrac{\partial C }{\partial b^{\left(1\right)}_{j}}\) for j = 1, ..., h, <br>
\(w^{\left(2\right)}_{j} \leftarrow w^{\left(2\right)}_{j} - \alpha \dfrac{\partial C }{\partial w^{\left(2\right)}_{j}}\) for j = 1, ..., h, <br>
\(b^{\left(2\right)} \leftarrow b^{\left(2\right)} - \alpha \dfrac{\partial C }{\partial b^{\left(2\right)}}\). <br>
&bull; It is very easy to make a mistake here. You can check if the gradient computation is correct by computing the numerical gradient using finite differences and compare it with your gradient: <br>
\(\dfrac{\partial C}{\partial v} \approx \dfrac{C\left(v + \varepsilon\right) - C\left(v\right)}{\varepsilon}, \varepsilon = 0.0001\). <br>
Here, \(v\) is one of \(w^{\left(1\right)}\), \(b^{\left(1\right)}\), \(w^{\left(2\right)}\), \(b^{\left(2\right)}\). Details see: <a href="https://en.wikipedia.org/wiki/Numerical_differentiation" target="_blank">Wikipedia</a>. <br>
&bull; Remember to compute the cost at each step and store the cost from the previous step: <br>
\(C = \dfrac{1}{2} \displaystyle\sum_{i=1}^{n} \left(y_{i} - a^{\left(2\right)}_{i}\right)^{2}\). <br>
&bull; Repeat the previous two steps until the decrease in \(C\) is smaller than something like 0.0001, or \(C\) is smaller than a fixed number like 1, or the number of iterations (epochs) is too large (say 1000). <br>
</details>
<input type="file", id="in_weights_input", accept='text/plain'><br><textarea id="in_weights"></textarea> <br>
<span hidden id="answer_5"></span> <br>
<br>
<h2>Question 6</h2>
&bull; [<span id="total_6">5</span> points] Enter the second layer weights (28 + 1 numbers, rounded to 4 decimal places, in one line, comma separated). The bias should be the last number: <br>
<details>
<summary>Hint</summary>
&bull; For each line \(\hat{x}_{i}\) in the test set, compute the activation value by: <br>
\(a'^{\left(1\right)}_{ij} = \dfrac{1}{1 + \exp\left(- \left(\left(\displaystyle\sum_{j'=1}^{m} x'_{ij'} w^{\left(1\right)}_{j'j}\right) + b^{\left(1\right)}_{j}\right)\right)}\). <br>
</details>
<input type="file", id="out_weights_input", accept='text/plain'><br><textarea id="out_weights"></textarea> <br>
<span hidden id="answer_6"></span> <br>
<br>
Now you can use your network to classify a digit you draw: <br>
<canvas id="canvas_nn" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_nn_state"> </span> <br>
<button id="button_11">Thin Pen</button> <button id="button_12">Thick Pen</button> <button id="button_13">Clear</button> <button id="button_14">Classify</button> <br>
Activation: <span id="act_nn">?</span>, Class: <span id="class_nn">?</span>, Digit: <span id="digit_nn">?</span>. <br>
Corresponding feature vector: <textarea id="feature_nn" rows="2" cols="20"></textarea> <button id="button_15">Download</button> <button id="button_16">Copy</button>. <br>
<br>
<h2>Question 7</h2>
&bull; [<span id="total_7">10</span> points] Enter the second layer activation values on the test set (200 numbers between 0 and 1, rounded to 2 decimal places, in one line, comma separated): <br>
<details>
<summary>Hint</summary>
&bull; For each line \(\hat{x}_{i}\) in the test set, compute the activation value by: <br>
\(a'^{\left(2\right)}_{i} = \dfrac{1}{1 + \exp\left(-\left(\left(\displaystyle\sum_{j=1}^{h} a'^{\left(1\right)}_{ij} w^{\left(2\right)}_{j}\right) + b^{\left(2\right)}\right)\right)}\). <br>
</details>
<input type="file", id="nn_act_input", accept='text/plain'><br><textarea id="nn_act"></textarea> <br>
<span hidden id="answer_7"></span> <br>
<br>
<h2>Question 8</h2>
&bull; [<span id="total_8">10</span> points] Enter the predicted values on the test set (200 integers, 0 or 1, prediction, in one line): <br>
<details>
<summary>Hint</summary>
&bull; If \(a_{i} < 0.5\), the label is 0, and if \(a_{i} \geq&nbsp; 0.5\), the label is 1. <br>
</details>
<input type="file", id="nn_pred_input", accept='text/plain'><br><textarea id="nn_pred"></textarea> <br>
<span hidden id="answer_8"></span> <br>
<br>
<h2>Question 9</h2>
&bull; [<span id="total_9">1</span> points] Enter the feature vector of one test image that is labeled incorrectly by your network (784 numbers in one line, rounded to 2 decimal places, comma separated). You can look at a few images that your network is uncertain of (the second layer activation is the closest to 0.5): if you cannot find any, you can use one that you draw yourself too. <br>
<details>
<summary>Hint</summary>
&bull; *spoiler* The first 100 images are for the first digit and the next 100 images are for the second digit. Please do not use this information and include the test images in your training set. <br>
</details>
<input type="file", id="incorrect_input", accept='text/plain'><br><textarea id="incorrect"></textarea> <br>
Plot the image: <button id="button_17">Plot</button> <br>
<canvas id="image" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="image_state"> </span> <br>
<span hidden id="answer_9"></span> <br>
<h2>Question 10</h2>
&bull; [<span id="total_10">1</span> points] Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the question that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
<br>
<h2>Grade</h2>
<button id="button_18">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** ***** <br>
<br>
<h2>Submission</h2>
<textarea id="output" rows="4" cols="40"></textarea> <br>
&bull; Please do not modify the content in the above text field: use the "Grade" button to update. <br>
&bull; Warning: grading may take around 10 to 20 seconds. Please be patient and do not click "Grade" multiple times. <br>
<form name="submit_form">
<input type="hidden" id="submit_id" name="id">
<input type="hidden" id="submit_n" name="n">
<input type="hidden" id="submit_a1" name="a1">
<input type="hidden" id="submit_a2" name="a2">
<input type="hidden" id="submit_a3" name="a3">
<input type="hidden" id="submit_a4" name="a4">
<input type="hidden" id="submit_a5" name="a5">
<input type="hidden" id="submit_a6" name="a6">
<input type="hidden" id="submit_a7" name="a7">
<input type="hidden" id="submit_a8" name="a8">
<input type="hidden" id="submit_a9" name="a9">
<input type="hidden" id="submit_a10" name="a10">
<input type="hidden" id="submit_g1" name="g1">
<input type="hidden" id="submit_g2" name="g2">
<input type="hidden" id="submit_g3" name="g3">
<input type="hidden" id="submit_g4" name="g4">
<input type="hidden" id="submit_g5" name="g5">
<input type="hidden" id="submit_g6" name="g6">
<input type="hidden" id="submit_g7" name="g7">
<input type="hidden" id="submit_g8" name="g8">
<input type="hidden" id="submit_g9" name="g9">
<input type="hidden" id="submit_g10" name="g10">
<input type="hidden" id="submit_g" name="g">
<input type="checkbox" id="submit_check"> <label for="submit_check">Check the box to confirm submission.</label><br>
<button type="submit">Submit</button>
<span id="submit_message"></span>
</form>
 <br>
&bull; You could submit multiple times (but please do not submit too often): only the latest submission will be counted.&nbsp; <br>
&bull; Please also save the text in the above text box to a file using the button <button id="button_19">Download</button> or copy and paste it into a file yourself <button id="button_20">Copy</button>. <font color="red"> Please submit the resulting file with your code on Canvas Assignment P1</font>. <br>
&bull; You could load your answers from the text (or txt file) in the text box below using the button <button id="button_21">Load</button>. The first two lines should be "##p: 1" and "##id: your id", and the format of the remaining lines should be "##1: your answer to question 1" newline "##2: your answer to question 2", etc. Please make sure that your answers are loaded correctly before submitting them. <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
&bull; Saving and loading may take around 10 to 20 seconds. Please be patient and do not click "Load" multiple times. <br>
<br>
<h2>Solutions</h2>
&bull; The sample solution in Java and Python will be posted around the deadline. You are allowed to copy and use parts of the solution without attribution. You are allowed to use code from other people and from the Internet, but you must give proper attribution at the beginning of the your code. <a href="https://theory.stanford.edu/~aiken/moss/" target="_blank">MOSS</a> will be used for code plagiarism check: blocks of copied code without attribution will result in a zero for the whole assignment. <br>
&bull; Sample solution from last year: <a href="CS540P1S20E">2020 P1</a>. The homework is slightly different, please use with caution. <br>
&bull; Sample solution: <br>
Java Part 1: <a href="CS540/P1/P1_LR_public.java">File</a> <br>
Python Part 1: <a href="CS540/P1/P1_LR_public.python">File</a> <br>
Java Part 2: <a href="CS540/P1/P1_NN_public.java">File</a> <br>
Python Part 2: <a href="CS540/P1/P1_NN_public.python">File</a> <br>
In part 2, the solution uses the ReLU activation function in the first layer, you have to change the activation and the gradient so that the code solves your version of the problem. <br>
In both parts, you have to change the hyper-parameters including the learning rate, the maximum number of iterations, and the stopping criterion based on your version of the training set and test set. You also have to figure out which variables to output: at the moment, the solution does not output the correct variables. <br>
&bull; You can get help on understanding the algorithm from any of the office hours. To get help with debugging code in Java, please come during the Monday to Friday 2:00 to 3:00 Zoom office hours or Saturday to Sunday 2:00 to 3:00 (I can stay for a few hours after 3:00 by appointment) in-person office hours. To get help with debugging code in Python, please come during the Tuesday 3:00 to 5:00 in-person office hours or the Thursday 3:00 to 5:00 Zoom office hours. You are encouraged to work with other students, but if you use their code, you must give attribution at the beginning of your code. <br>
<script type="module"> 
import {enter_button, gen_questions, download_file, clipboard, read_file, plot_image_page, set_state, clean_paper, activate_log_page, activate_nn_page, grade, submit_file, load_ans_page} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
enter_button("@id", "button_0");
document.getElementById("button_1").onclick = () => download_file("@test_0", "test");
document.getElementById("button_2").onclick = () => clipboard("@test_0");
document.getElementById("training_input").onchange = () => read_file(event, "training");
document.getElementById("button_3").onclick = () => plot_image_page("@training", "@digit", "28", "28");
document.getElementById("log_weights_input").onchange = () => read_file(event, "log_weights");
document.getElementById("button_4").onclick = () => plot_image_page("@log_weights", "@weights", "28", "28");
document.getElementById("button_5").onclick = () => set_state("select_1", "canvas_log");
document.getElementById("button_6").onclick = () => set_state("select_3", "canvas_log");
document.getElementById("button_7").onclick = () => clean_paper("node", "canvas_log", "none");
document.getElementById("button_8").onclick = () => activate_log_page("canvas_log", "log_weights", "act_log", "class_log", "d1_0", "d2_0", "digit_log", "feature_log");
document.getElementById("button_9").onclick = () => download_file("@feature_log", "LNN");
document.getElementById("button_10").onclick = () => clipboard("@feature_log");
document.getElementById("log_act_input").onchange = () => read_file(event, "log_act");
document.getElementById("log_pred_input").onchange = () => read_file(event, "log_pred");
document.getElementById("in_weights_input").onchange = () => read_file(event, "in_weights");
document.getElementById("out_weights_input").onchange = () => read_file(event, "out_weights");
document.getElementById("button_11").onclick = () => set_state("select_1", "canvas_nn");
document.getElementById("button_12").onclick = () => set_state("select_3", "canvas_nn");
document.getElementById("button_13").onclick = () => clean_paper("node", "canvas_nn", "none");
document.getElementById("button_14").onclick = () => activate_nn_page("canvas_nn", "in_weights", "out_weights", "act_nn", "class_nn", "d1_0", "d2_0", "digit_nn", "feature_nn");
document.getElementById("button_15").onclick = () => download_file("@feature_nn", "FNN");
document.getElementById("button_16").onclick = () => clipboard("@feature_nn");
document.getElementById("nn_act_input").onchange = () => read_file(event, "nn_act");
document.getElementById("nn_pred_input").onchange = () => read_file(event, "nn_pred");
document.getElementById("incorrect_input").onchange = () => read_file(event, "incorrect");
document.getElementById("button_17").onclick = () => plot_image_page("@incorrect", "@image", "28", "28");
document.getElementById("button_18").onclick = () => grade();
submit_file("submit_form", "https://script.google.com/macros/s/AKfycbzEMQVs77vGDr1PxAnN4kvC0Vi49dVXxKYjhNc6lKnex4HrMPjV/exec", "@submit_message", "@submit_check", "@submit_id");
document.getElementById("button_19").onclick = () => download_file("@output", "P1");
document.getElementById("button_20").onclick = () => clipboard("@output");
document.getElementById("button_21").onclick = () => load_ans_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: July 23, 2021 at 6:07 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S21.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540S21W1.htm">Week 1 </a></li>
<li><a href="CS540S21W2.htm">Week 2 </a></li>
<li><a href="CS540S21W3.htm">Week 3 </a></li>
<li><a href="CS540S21W5.htm">Week 5 </a></li>
<li><a href="CS540S21W6.htm">Week 6 </a></li>
<li><a href="CS540S21W7.htm">Week 7 </a></li>
</ul>
<li><a href="CS540S21W4.htm">Midterm </a></li>
<li><a href="CS540S21W8.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>

