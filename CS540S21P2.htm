<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.9914344295440711" type="module" defer></script>
<script src="CS540.js?0.8218734759356998" type="module" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2021</h1>
</div> 
<div id="content">

<script type="module"> import {p2s21} from "./CS540.js"; p2s21() </script> <br>
Prev: <a href="CS540S21P1.htm">P1</a> Next: <a href="CS540S21P3.htm">P3</a> <br>
Back to week 2 page: <a href="CS540S21W2.htm">Link</a> <br>
<br>
<br>
<h2>P2 Programming Problem Instruction</h2>
&bull; Enter your ID (the wisc email ID without @wisc.edu) here: <input type="text" id="id" value="" size="20"> and click <button id="button_0">Confirm</button> (or hit enter key) <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <span hidden id="assignment">p2</span> <br>
&bull; The official deadline is July 11, but you can submit or resubmit without penalty until August 15. <br>
&bull; The same ID should generate the same set of questions. Your answers are not saved when you close the browser. You could either copy and paste or load your program outputs into the text boxes for individual questions or print all your outputs to a single text file and load it using the button at the bottom of the page. <br>
&bull; Please do not refresh the page: your answers will not be saved. <br>
&bull; You should implement the algorithms using the mathematical formulas from the slides. You can use packages and libraries to preprocess and read the data and format the outputs. It is not recommended that you use machine learning packages or libraries, but you will not lose points for doing so. <br>
&bull; Please report any bugs on Piazza. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
<script src="wisconsin.js"></script>
<span hidden id="store">5:tree_full;7:label_full;8:tree_pruned;9:label_pruned</span> <br>
&bull; (Introduction) In this programming homework, you will build decision stumps and a decision tree to diagnose whether a patient has some disease based on their symptoms and medical test results. Unfortunately, we do not have a nice dataset on COVID-19, so we will use the Wisconsin Breast Cancer dataset. Your models will read in integer-valued patient data and output a diagnosis of whether the patient has breast cancer. <br>
<br>
&bull; (Part 1) Go to the website: <a href="https://archive.ics.uci.edu/ml/datasets/breast+cancer+wisconsin+%28original%29" target="_blank">Dataset</a>, click on "Data Folder" and download "breast-cancer-wisconsin.data". Read the dataset description to figure out which variables are features and which variable is the label. There are lines containing "?", you could either remove them or replace them by a constant when parsing them into the feature matrix. <br>
<br>
The list of variables is copied below: <br>
1. Sample code number: id number <br>
2. Clump Thickness: 1 - 10 <br>
3. Uniformity of Cell Size: 1 - 10 <br>
4. Uniformity of Cell Shape: 1 - 10 <br>
5. Marginal Adhesion: 1 - 10 <br>
6. Single Epithelial Cell Size: 1 - 10 <br>
7. Bare Nuclei: 1 - 10 <br>
8. Bland Chromatin: 1 - 10 <br>
9. Normal Nucleoli: 1 - 10 <br>
10. Mitoses: 1 - 10 <br>
11. Class: (2 for benign, 4 for malignant) <br>
<br>
&bull; (Part 1) Train a binary decision stump (decision tree with depth 1) using the following feature: <span id="var_0">?</span> (indexed according to the above list). Report the counts and the information gain. Since the features are integer-valued, you could either try all binary splits and find the one with the maximum information gain, or you could use the real-valued decision tree learning algorithm discussed in the lecture. <br>
<br>
&bull; (Part 2) Train a binary decision tree using the following features: <span id="vars_0">?</span> (indexed according to the same list). Report the tree using the following format: <br>
<textarea id="example_0" rows="2" cols="20"></textarea> <br>
&bull; Note: make sure you only use "x? <= integer" as the condition and you only return "2" or "4". Spaces and indentations do not matter. You can use any tie breaking rule you like for comparing information gain and finding the majority label. <br>
<br>
&bull; (Part 2) Classify the following patients using your tree. This is the test set. <br>
<textarea id="test_0" rows="2" cols="20"></textarea> <br>
You can either use the <button id="button_1">Download</button> button to download a text file, or copy and paste from the text box into Excel or a CSV file. Please do not change the content of the text box. <br>
<br>
&bull; (Part 2) Prune the tree so that the maximum depth is <span id="depth_0">?</span>. The root is at depth 0. You could do this with or without a validation set. <br>
<br>
<h2>Question 1</h2>
&bull; [<span id="total_1">1</span> points] Enter the total number of positive and negative instances in the training set (two integers, comma-separated, in the order, benign, malignant). <br>
<details>
<summary>Hint</summary>
&bull; Count the number of 2's and 4' in the training set. <br>
</details>
&bull; Answer: <input type="text" id="answer_1" value="" size="20">. <br>
<br>
<h2>Question 2</h2>
&bull; [<span id="total_2">2</span> points] Enter the initial entropy at the root before the split (one number, rounded to 4 decimal places). <br>
<details>
<summary>Hint</summary>
&bull; See Lecture 6 slides for the formula for entropy. Say the integer you entered in the previous question is \(n_{2}, n_{4}\) and let \(n = n_{2} + n_{4}\), then the entropy is, <br>
\(H(Y) = - \dfrac{n_{2}}{n} \log_{2}\left(\dfrac{n_{2}}{n}\right) - \dfrac{n_{4}}{n} \log_{2}\left(\dfrac{n_{4}}{n}\right)\). <br>
</details>
&bull; Answer: <input type="text" id="answer_2" value="" size="20">. <br>
<br>
<h2>Question 3</h2>
&bull; [<span id="total_3">1</span> points] For the decision stump (Part 1), enter the number of positive and negative instances in the training set above and below the threshold (four integers, comma-separated, in the order: below-benign, above-benign, below-malignant, above-malignant). <br>
<details>
<summary>Hint</summary>
&bull; Suppose you split your variable \(x_{i}\) at \(t \in \left\{1, 2, ..., 9\right\}\), then the four numbers you enter should be: <br>
(1) \(n_{2-}\) the number of 2's with \(x_{i} \leq&nbsp; t\). <br>
(2) \(n_{2+}\) the number of 2's with \(x_{i} > t\). <br>
(3) \(n_{4-}\) the number of 4's with \(x_{i} \leq&nbsp; t\). <br>
(4) \(n_{4+}\) the number of 4's with \(x_{i} > t\). <br>
&bull; In this case, the conditional entropy will be, <br>
\(H\left(Y | X_{i}\right) = - \dfrac{n_{2-}}{n} \log_{2}\left(\dfrac{n_{2-}}{n_{-}}\right) - \dfrac{n_{2+}}{n} \log_{2}\left(\dfrac{n_{2+}}{n_{+}}\right) - \dfrac{n_{4-}}{n} \log_{2}\left(\dfrac{n_{4-}}{n_{-}}\right) - \dfrac{n_{4+}}{n} \log_{2}\left(\dfrac{n_{4+}}{n_{+}}\right)\). <br>
&bull; The information gain will be, <br>
\(I\left(Y | X_{i}\right) = H\left(Y\right) - H\left(Y | X_{i}\right)\). <br>
&bull; For this question, you do not have to find the optimal split, but you will need to write the code for Part 2 anyways. One simple brute force way to do it is to compute the information gain for each of \(t = 1, 2, ..., 9\) and find the \(t\) corresponding to the largest information gain. A more efficient way is to list the unique values of \(x_{i}\) and only compute the information gain for those values of \(t\). <br>
</details>
&bull; Answer: <input type="text" id="answer_3" value="" size="20">. <br>
<br>
<h2>Question 4</h2>
&bull; [<span id="total_4">2</span> points] For the decision stump (Part 1), enter the information gain after the split (one number, rounded to 4 decimal places). <br>
<details>
<summary>Hint</summary>
&bull; See the hint for the previous question. <br>
</details>
&bull; Answer: <input type="text" id="answer_4" value="" size="20">. <br>
<br>
<h2>Question 5</h2>
&bull; [<span id="total_5">5</span> points] Input the binary decision tree in the format described previously. <br>
<details>
<summary>Hint</summary>
&bull; You should not split according to the order in the list of features, you still have to find the feature (in the list) corresponding to the max information gain at each split. <br>
&bull; You can split the same feature multiple times. <br>
&bull; Basically, you should solve Part 1 for each \(x_{i}\) in your list, and find the \(i\) corresponding to the largest information gain. <br>
&bull; Given the optimal feature-split pair \(i, t\), split the dataset into two subsets, one containing all instances with \(x_{i} \leq&nbsp; t\) and the other containing all items with \(x_{i} > t\), and repeat the same process for the two subsets. <br>
&bull; Stop splitting when all instances in the subset has the same label. <br>
&bull; Stop splitting and use the majority label in the current subset if maximum information gain is 0. <br>
</details>
<input type="file", id="tree_full_input", accept='text/plain'><br><textarea id="tree_full"></textarea> <br>
<span hidden id="answer_5"></span> <br>
<br>
Now you can use your tree to classify the following patient: <br>
Feature vector (10 numbers, comma separated): <input type="text" id="test_full" value="" size="20"> <br>
OR (make sure you leave the above text field blank): <br>
1. Sample code number: <input type="text" id="full_1" value="" size="20"> <br>
2. Clump Thickness: <input type="range" min="1" max="10" value="5" step="1" id="full_2"></slider> <br>
3. Uniformity of Cell Size: <input type="range" min="1" max="10" value="5" step="1" id="full_3"></slider> <br>
4. Uniformity of Cell Shape: <input type="range" min="1" max="10" value="5" step="1" id="full_4"></slider> <br>
5. Marginal Adhesion: <input type="range" min="1" max="10" value="5" step="1" id="full_5"></slider> <br>
6. Single Epithelial Cell Size: <input type="range" min="1" max="10" value="5" step="1" id="full_6"></slider> <br>
7. Bare Nuclei: <input type="range" min="1" max="10" value="5" step="1" id="full_7"></slider> <br>
8. Bland Chromatin: <input type="range" min="1" max="10" value="5" step="1" id="full_8"></slider> <br>
9. Normal Nucleoli: <input type="range" min="1" max="10" value="5" step="1" id="full_9"></slider> <br>
10. Mitoses: <input type="range" min="1" max="10" value="5" step="1" id="full_10"></slider> <br>
<button id="button_2">Classify</button> Label: <span id="output_full">?</span>. <br>
Corresponding feature vector: <input type="text" id="feature_full" value="" size="20"> <button id="button_3">Copy</button>. <br>
<br>
<h2>Question 6</h2>
&bull; [<span id="total_6">2</span> points] Enter the maximum depth of this tree. The root is at depth 0. For example, if you only have "if ..., else ...", you should enter 1. <br>
<details>
<summary>Hint</summary>
&bull; Just making sure that we are counting the depth of the tree the same way. <br>
</details>
&bull; Answer: <input type="text" id="answer_6" value="" size="20"> <br>
<br>
<h2>Question 7</h2>
&bull; [<span id="total_7">15</span> points] Input the class labels on the test set (200 integers, either 2 or 4, comma separated, in one line). <br>
<details>
<summary>Hint</summary>
&bull; Start from the root, if \(x_{i} \leq&nbsp; t\), go to the left subtree, otherwise, go the right subtree. Stop if the subtree is a leaf and return the label. <br>
</details>
<input type="file", id="label_full_input", accept='text/plain'><br><textarea id="label_full"></textarea> <br>
<span hidden id="answer_7"></span> <br>
<br>
<h2>Question 8</h2>
&bull; [<span id="total_8">5</span> points] Input the pruned binary decision tree in the format described previously. <br>
<input type="file", id="tree_pruned_input", accept='text/plain'><br><textarea id="tree_pruned"></textarea> <br>
<span hidden id="answer_8"></span> <br>
<details>
<summary>Hint</summary>
&bull; It is possible that you can get high accuracy after just cutting the tree at the desired depth, but you should still try some pruning. <br>
&bull; In practice, you should not use the test set in training and validation, but for the purpose of this homework, you can prune the tree using the test set: *spoiler* the first 100 instances has label 2 and the last 100 instances has label 4. <br>
&bull; To prune the tree using the test set, you evaluate the accuracy of each subtree: if the accuracy is lower than classifying all instances as 2 (or classifying all instances as 4), you should replace this subtree by a leaf and use the majority label; if the accuracy is higher, continue pruning the subtrees. <br>
</details>
<br>
Now you can use your pruned tree to classify the following patient: <br>
Feature vector (10 numbers, comma separated): <input type="text" id="test_pruned" value="" size="20"> <br>
OR (make sure you leave the above text field blank): <br>
1. Sample code number: <input type="text" id="pruned_1" value="" size="20"> <br>
2. Clump Thickness: <input type="range" min="1" max="10" value="5" step="1" id="pruned_2"></slider> <br>
3. Uniformity of Cell Size: <input type="range" min="1" max="10" value="5" step="1" id="pruned_3"></slider> <br>
4. Uniformity of Cell Shape: <input type="range" min="1" max="10" value="5" step="1" id="pruned_4"></slider> <br>
5. Marginal Adhesion: <input type="range" min="1" max="10" value="5" step="1" id="pruned_5"></slider> <br>
6. Single Epithelial Cell Size: <input type="range" min="1" max="10" value="5" step="1" id="pruned_6"></slider> <br>
7. Bare Nuclei: <input type="range" min="1" max="10" value="5" step="1" id="pruned_7"></slider> <br>
8. Bland Chromatin: <input type="range" min="1" max="10" value="5" step="1" id="pruned_8"></slider> <br>
9. Normal Nucleoli: <input type="range" min="1" max="10" value="5" step="1" id="pruned_9"></slider> <br>
10. Mitoses: <input type="range" min="1" max="10" value="5" step="1" id="pruned_10"></slider> <br>
<button id="button_4">Classify</button> Label: <span id="output_pruned">?</span>. <br>
Corresponding feature vector: <input type="text" id="feature_pruned" value="" size="20"> <button id="button_5">Copy</button>. <br>
<br>
<h2>Question 9</h2>
&bull; [<span id="total_9">15</span> points] Input the class labels on the test set (200 integers, either 2 or 4, comma separated, in one line). <br>
<details>
<summary>Hint</summary>
&bull; Start from the root, if \(x_{i} \leq&nbsp; t\), go to the left subtree, otherwise, go the right subtree. Stop if the subtree is a leaf and return the label. <br>
</details>
<input type="file", id="label_pruned_input", accept='text/plain'><br><textarea id="label_pruned"></textarea> <br>
<span hidden id="answer_9"></span> <br>
<h2>Question 10</h2>
&bull; [<span id="total_10">1</span> points] Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the question that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
<br>
<h2>Grade</h2>
<button id="button_6">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** ***** <br>
<br>
<h2>Submission</h2>
<textarea id="output" rows="4" cols="40"></textarea> <br>
&bull; Please do not modify the content in the above text field: use the "Grade" button to update. <br>
&bull; Warning: grading may take around 10 to 20 seconds. Please be patient and do not click "Grade" multiple times. <br>
<form name="submit_form">
<input type="hidden" id="submit_id" name="id">
<input type="hidden" id="submit_n" name="n">
<input type="hidden" id="submit_a1" name="a1">
<input type="hidden" id="submit_a2" name="a2">
<input type="hidden" id="submit_a3" name="a3">
<input type="hidden" id="submit_a4" name="a4">
<input type="hidden" id="submit_a5" name="a5">
<input type="hidden" id="submit_a6" name="a6">
<input type="hidden" id="submit_a7" name="a7">
<input type="hidden" id="submit_a8" name="a8">
<input type="hidden" id="submit_a9" name="a9">
<input type="hidden" id="submit_a10" name="a10">
<input type="hidden" id="submit_g1" name="g1">
<input type="hidden" id="submit_g2" name="g2">
<input type="hidden" id="submit_g3" name="g3">
<input type="hidden" id="submit_g4" name="g4">
<input type="hidden" id="submit_g5" name="g5">
<input type="hidden" id="submit_g6" name="g6">
<input type="hidden" id="submit_g7" name="g7">
<input type="hidden" id="submit_g8" name="g8">
<input type="hidden" id="submit_g9" name="g9">
<input type="hidden" id="submit_g10" name="g10">
<input type="hidden" id="submit_g" name="g">
<input type="checkbox" id="submit_check"> <label for="submit_check">Check the box to confirm submission.</label><br>
<button type="submit">Submit</button>
<span id="submit_message"></span>
</form>
 <br>
&bull; You could submit multiple times (but please do not submit too often): only the latest submission will be counted.&nbsp; <br>
&bull; Please also save the text in the above text box to a file using the button <button id="button_7">Download</button> or copy and paste it into a file yourself <button id="button_8">Copy</button>. <font color="red"> Please submit the resulting file with your code on Canvas Assignment P2</font>. <br>
&bull; You could load your answers from the text (or txt file) in the text box below using the button <button id="button_9">Load</button>. The first two lines should be "##p: 2" and "##id: your id", and the format of the remaining lines should be "##1: your answer to question 1" newline "##2: your answer to question 2", etc. Please make sure that your answers are loaded correctly before submitting them. <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
&bull; Saving and loading may take around 10 to 20 seconds. Please be patient and do not click "Load" multiple times. <br>
<br>
<h2>Solutions</h2>
&bull; The sample solution in Java and Python will be posted around the deadline. You are allowed to copy and use parts of the solution without attribution. You are allowed to use code from other people and from the Internet, but you must give proper attribution at the beginning of the your code. <a href="https://theory.stanford.edu/~aiken/moss/" target="_blank">MOSS</a> will be used for code plagiarism check: blocks of copied code without attribution will result in a zero for the whole assignment. <br>
&bull; Sample solution from last year: <a href="CS540P2S20E">2020 P2</a>. The homework is slightly different, please use with caution. <br>
&bull; Sample solution: <br>
Java: <a href="CS540/P2/P2_public.java">File</a> <br>
Python: <a href="CS540/P2/P2_public.python">File</a> <br>
For both parts, you need to restrict to using a subset of the features based your version of the training set and test set. <br>
For pruning, you can either implement error reduction pruning (optional), or cut the tree at the required depth (if you cannot get the desired accuracy, you can prune or train using the test set). <br>
You need to write the code to print the tree in the format specified in the question. <br>
&bull; You can get help on understanding the algorithm from any of the office hours. To get help with debugging code in Java, please come during the Monday to Friday 2:00 to 3:00 Zoom office hours or Saturday to Sunday 2:00 to 3:00 (I can stay for a few hours after 3:00 by appointment) in-person office hours. To get help with debugging code in Python, please come during the Tuesday 3:00 to 5:00 in-person office hours or the Thursday 3:00 to 5:00 Zoom office hours. You are encouraged to work with other students, but if you use their code, you must give attribution at the beginning of your code. <br>
<script type="module"> 
import {enter_button, gen_questions, download_file, read_file, activate_tree_page, clipboard, grade, submit_file, load_ans_page} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
enter_button("@id", "button_0");
document.getElementById("button_1").onclick = () => download_file("@test_0", "test");
document.getElementById("tree_full_input").onchange = () => read_file(event, "tree_full");
document.getElementById("button_2").onclick = () => activate_tree_page("full_", "10", "test_full", "tree_full", "output_full", "feature_full");
document.getElementById("button_3").onclick = () => clipboard("@feature_full");
document.getElementById("label_full_input").onchange = () => read_file(event, "label_full");
document.getElementById("tree_pruned_input").onchange = () => read_file(event, "tree_pruned");
document.getElementById("button_4").onclick = () => activate_tree_page("pruned_", "10", "test_pruned", "tree_pruned", "output_pruned", "feature_pruned");
document.getElementById("button_5").onclick = () => clipboard("@feature_pruned");
document.getElementById("label_pruned_input").onchange = () => read_file(event, "label_pruned");
document.getElementById("button_6").onclick = () => grade();
submit_file("submit_form", "https://script.google.com/macros/s/AKfycbzEMQVs77vGDr1PxAnN4kvC0Vi49dVXxKYjhNc6lKnex4HrMPjV/exec", "@submit_message", "@submit_check", "@submit_id");
document.getElementById("button_7").onclick = () => download_file("@output", "P2");
document.getElementById("button_8").onclick = () => clipboard("@output");
document.getElementById("button_9").onclick = () => load_ans_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: July 23, 2021 at 6:08 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S21.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540S21W1.htm">Week 1 </a></li>
<li><a href="CS540S21W2.htm">Week 2 </a></li>
<li><a href="CS540S21W3.htm">Week 3 </a></li>
<li><a href="CS540S21W5.htm">Week 5 </a></li>
<li><a href="CS540S21W6.htm">Week 6 </a></li>
<li><a href="CS540S21W7.htm">Week 7 </a></li>
</ul>
<li><a href="CS540S21W4.htm">Midterm </a></li>
<li><a href="CS540S21W8.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>

