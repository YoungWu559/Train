<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.5234810423270096" type="module" defer></script>
<script src="CS540.js?0.7351759132499164" type="module" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2021</h1>
</div> 
<div id="content">

<script type="module"> import {m9s21} from "./CS540.js"; m9s21() </script> <br>
<script type="module"> import {expand_all} from "./YJS.js"; expand_all() </script> <br>
Prev: <a href="CS540S21T8.htm">M8</a> Next: <a href="CS540S21T10.htm">M10</a> <br>
Back to week 6 page: <a href="CS540S21W6.htm">Link</a> <br>
<br>
<h2><font color="red"> Warning: this is a replica of the homework page for testing purposes, please use <a href="CS540S21M9.htm">M9</a> for homework submission. </font><br></h2>
<br>
<h2>T9 Written (Math) Problems</h2>
&bull; Enter your ID (the wisc email ID without @wisc.edu) here: <input type="text" id="id" value="test" size="20"> and click <button id="button_0">Confirm</button> (or hit enter key) <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <span hidden id="assignment">m9</span> <br>
&bull; The same ID should generate the same set of questions. Your answers are not saved when you close the browser. You could print the page: <button id="button_1">Print</button>, solve the problems, then enter all your answers at the end. <br>
&bull; Please do not refresh the page: your answers will not be saved. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
<h2>Question 1</h2>
<span id="p1"></span> <br>
<h2>Question 2</h2>
<span id="p2"></span> <br>
<h2>Question 3</h2>
<span id="p3"></span> <br>
<h2>Question 4</h2>
<span id="p4"></span> <br>
<h2>Question 5</h2>
<span id="p5"></span> <br>
<h2>Question 6</h2>
<span id="p6"></span> <br>
<h2>Question 7</h2>
<span id="p7"></span> <br>
<h2>Question 8</h2>
<span id="p8"></span> <br>
<h2>Question 9</h2>
<span id="p9"></span> <br>
<h2>Question 10</h2>
<span id="p10"></span> <br>
<div id="q1">
&bull; [<span id="total_1">4</span> points] Imagine a world where each person has <span id="branch_1"></span> friends. Alice and Bob are \(d\) = <span id="level_1"></span> "friendship links" away (i.e. if \(d\) = 1, Alice and Bob are friends; if \(d\) = 2, there is a third person X such that Alice and X are friends, and Bob and X are friends; and so on). Imagine a breadth first search (BFS) algorithm that has access to the friendship links. The algorithm starts at Alice and the goal is to find Bob. In the worst case, how many people (the same person visited multiple times are counted as multiple visits) the algorithm needs to visit (including Alice and Bob)? <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q1, Fall 2016 Midterm Q1, Fall 2010 Final Q3. If the goal is the "last" node visited, then the number of nodes visited is the same as the total number of nodes in a complete tree with depth \(d\) and branching factor \(b\), which is \(\displaystyle\sum_{i=0}^{d} b^{i}\). <br>
</details>
&bull; Answer: <input type="text" id="answer_1" value="" size="20">. <button id="button_2">Calculate</button> <span id="calc_1"></span> <br>
</div>
<div id="q2">
&bull; [<span id="total_2">3</span> points] Let the search space be integers. Each state \(n\) has successors <span id="suc_2"></span>. Write down the shortest path (i.e. the sequence of states) from the initial state 1 to the goal state <span id="goal_2"></span>. <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q2, Fall 2017 Final Q13. Suppose the successors are \(a n, a n + 1, ...\), then start from the goal state \(g\), look at the remainder when \(g\) is divided by \(a\) to figure out which integer is its "predecessor" and do this repeatedly until the initial state is reached. <br>
</details>
&bull; Answer: <input type="text" id="answer_2" value="" size="20">. <button id="button_3">Calculate</button> <span id="calc_2"></span> <br>
</div>
<div id="q3">
&bull; [<span id="total_3">2</span> points] Consider a 3-puzzle where, like in the usual 8-puzzle game, a tile can only move to an adjacent empty space. Tiles cannot move diagonally. Which of the following initial states can reach the goal state <span id="goal_3"></span> (0 means "no tile")? <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q3. Since there are only four tiles, there is no way to change the ordering of the tiles: starting from 0, write down the numbers from the matrix in the clockwise order, the ones that are the same as the goal state can reach the goal state. <br>
</details>
&bull; Choices: <br>
<input type="checkbox" id="answer1_3" name = "none" value = "answer1_3"> <span id="choice1_3"></span> <br>
<input type="checkbox" id="answer2_3" name = "none" value = "answer2_3"> <span id="choice2_3"></span> <br>
<input type="checkbox" id="answer3_3" name = "none" value = "answer3_3"> <span id="choice3_3"></span> <br>
<input type="checkbox" id="answer4_3" name = "none" value = "answer4_3"> <span id="choice4_3"></span> <br>
<input type="checkbox" id="answer5_3" name = "none" value = "answer5_3"> <span id="choice5_3"></span> <br>
<input type="checkbox" id="answer6_3" name = "none" value = "answer6_3"> None of the above <br>
</div>
<div id="q4">
&bull; [<span id="total_4">3</span> points] Consider Iterative Deepening Search on a tree, where the nodes are denoted by numbers. Write down the sequence IDS visited in the order they are expanded (i.e. expansion path). 0 is the initial state and <span id="n_4"></span> is the goal state. Start with depth limit 0, include the root, and include repeated nodes. <br>
&bull; Note: use the convention used in the lectures, push the rightmost (in the diagram) successor into the stack first or enqueue the leftmost (in the diagram) successor into the queue first. <br>
<canvas id="canvas_4" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_4_state"> </span> <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q5, Spring 2018 Midterm Q1, Fall 2006 Final Q1, Fall 2005 Final Q1. Start with 0, then DFS on the tree with depth 1, then DFS on the tree with depth 2, ... <br>
</details>
&bull; Answer (comma separated vector): <input type="text" id="answer_4" value="" size="20">. <br>
</div>
<div id="q5">
&bull; [<span id="total_5">3</span> points] Consider Iterative Deepening Search on a tree, where the nodes are denoted by numbers. Iterative deepening search visited the following sequence of nodes (expansion path): <span id="seq_5"></span>. Reconstruct one possible tree. 0 is the initial state and <span id="n_5"></span> is the goal state. You must include all nodes from 0 to <span id="n2_5"></span>. <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q5. Every time node 0 is checked, DFS restarts with depth increased by one. Split the expansion path by the 0s to figure out which nodes are at each depth, and draw the tree accordingly. <br>
</details>
&bull; Answer:&nbsp; <br>
<canvas id="canvas_5" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_5_state"> </span> <span hidden id="answer_5"></span> <span hidden id="load_5">graph</span> <br>
<button id="button_4">Pen</button> <button id="button_5">Eraser</button> <br>
&bull; Note: to use the eraser, drag it from one node to another to remove the (directed) edge in between. <br>
</div>
<div id="q6">
&bull; [<span id="total_6">2</span> points] Consider n + 1 = <span id="n_6"></span> + 1 states. The initial state is 1, the goal state is n. State 0 is a dead-end state with no successors. For each non-0 state i, it has two successors: i + 1 and 0. There is no cycle check nor CLOSED list (this means we may expand (or goal-check) the same nodes many times, because we do not keep track of which nodes are checked previously). How many goal-checks will be performed by Breadth First Search? Break ties by expanding the node with the smaller index first. <br>
<details>
<summary>Hint</summary>
See Fall 2017 Final Q24, Fall 2016 Midterm Q2. Draw the tree with a small \(n\) and find the pattern. At depth \(0\), only 0 is search, and at each depth \(d > 0\), 0 is always searched first, then \(d\) is searched. <br>
</details>
&bull; Answer: <input type="text" id="answer_6" value="" size="20">. <button id="button_6">Calculate</button> <span id="calc_6"></span> <br>
</div>
<div id="q7">
&bull; [<span id="total_7">2</span> points] Consider a search graph which is a tree, and each internal node has <span id="b_7"></span> children. The only goal node is at depth <span id="d_7"></span> (root is depth 0). How many total goal-checks will be performed by Iterative Deepening Search in the luckiest case (i.e. the smallest number of goal-checks)? If a node is checked multiple times you should count that multiple times. <br>
<details>
<summary>Hint</summary>
See Fall 2018 Midterm Q5. When the depth limit is \(i\), every node in the tree limited to depth \(i\) are searched, so \(\displaystyle\sum_{i'=0}^{i} b^{i'}\) nodes are searched in iterations \(i = 0, 1, ..., d - 1\). In the luckiest case, the goal node is on the first path when the depth limit is \(d\), so at least \(d + 1\) nodes are searched in iteration \(i = d\). <br>
</details>
&bull; Answer: <input type="text" id="answer_7" value="" size="20">.&nbsp; <button id="button_7">Calculate</button> <span id="calc_7"></span> <br>
</div>
<div id="q8">
&bull; [<span id="total_8">2</span> points] Recall in uniform-cost search, each node has a path-cost from the initial node (sum of edge costs along the path), and the search expands the least path-cost node first. Consider a search graph with \(n\) = <span id="n_8"></span> nodes: \(1, 2, ..., n\). For all \(1 \leq&nbsp; i < j \leq&nbsp; n\), there is a directed edge from \(i\) to \(j\)&nbsp; with an edge cost <span id="cost_8"></span>. The initial node is 1, and the goal node is \(n\). How many (unique) goal-checks (the same nodes expanded twice is counted only once) with uniform-cost search perform? Break ties by expanding the node with the smaller index first. <br>
<details>
<summary>Hint</summary>
See Fall 2016 Final Q2. Draw the graph with a small \(n\) and find the pattern. Since there is a node between node 1 and every other node, all nodes with an edge cost to node 1 that is less than the minimum cost of the whole graph (or equal to the minimum cost and with a smaller index) will be visited at least once during UCS. Here, all nodes satisfy this condition, so all \(n\) of them will be visited. <br>
</details>
&bull; Answer: <input type="text" id="answer_8" value="" size="20">.&nbsp; <button id="button_8">Calculate</button> <span id="calc_8"></span> <br>
</div>
<div id="q9">
&bull; [<span id="total_9">2</span> points] Consider a search tree where the root is at depth 0, each internal node has <span id="b_9"></span> children, and all leaves are at depth <span id="D_9"></span>. There is a single goal state at depth <span id="d_9"></span>. How much <span id="complex_9"></span> (in number of states including the root and the goal) is sufficient so <span id="method_9"></span> always succeeds? Select all that applies. <br>
<details>
<summary>Hint</summary>
See Fall 2017 Midterm Q4, Fall 2017 Midterm Q5, Fall 2016 Final Q1, Fall 2006 Midterm Q6. The worst case is when the goal is the last node at depth \(d\). BFS time complexity: \(\displaystyle\sum_{i=0}^{d} b^{i}\), space complexity: \(b^{d}\). DFS time complexity: \(\displaystyle\sum_{i=}\left(D-d+1\right)^{D} b^{i} + 1\), space complexity: \((b - 1) D + 1\). IDS time complexity: \(\displaystyle\sum_{i=0}^{d} \left(d + 1 - i\right) b^{i}\), space complexity: \((b - 1) d + 1\). Please check to make sure that these are correct!&nbsp;&nbsp; <br>
</details>
&bull; Choices: <br>
<input type="checkbox" id="answer1_9" name = "none" value = "answer1_9"> <span id="choice1_9"></span> <br>
<input type="checkbox" id="answer2_9" name = "none" value = "answer2_9"> <span id="choice2_9"></span> <br>
<input type="checkbox" id="answer3_9" name = "none" value = "answer3_9"> <span id="choice3_9"></span> <br>
<input type="checkbox" id="answer4_9" name = "none" value = "answer4_9"> <span id="choice4_9"></span> <br>
<input type="checkbox" id="answer5_9" name = "none" value = "answer5_9"> <span id="choice5_9"></span> <br>
<input type="checkbox" id="answer6_9" name = "none" value = "answer6_9"> None of the above <br>
</div>
<div id="q10">
&bull; [<span id="total_10">1</span> points] Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the questions that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
</div>
<br>
<h2>Grade</h2>
<button id="button_9">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** ***** <br>
<br>
<textarea id="output" rows="4" cols="40"></textarea> <br>
&bull; You could save the text in the above text box to a file using the button <button id="button_10">Download</button> or copy and paste it into a file yourself <button id="button_11">Copy</button>. <br>
&bull; You could load your answers from the text (or txt file) in the text box below using the button <button id="button_12">Load</button>. The first two lines should be "##m: 9" and "##id: your id", and the format of the remaining lines should be "##1: your answer to question 1" newline "##2: your answer to question 2", etc. Please make sure that your answers are loaded correctly before submitting them. <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
<script type="module"> 
import {enter_button, gen_questions, math_eval_page, set_state, grade, download_file, clipboard, load_ans_page, read_file} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
enter_button("@id", "button_0");
document.getElementById("button_1").onclick = () => window.print();
document.getElementById("button_2").onclick = () => math_eval_page("@answer_1", "@calc_1");
enter_button("@answer_1", "button_2");
document.getElementById("button_3").onclick = () => math_eval_page("@answer_2", "@calc_2");
enter_button("@answer_2", "button_3");
document.getElementById("button_4").onclick = () => set_state("edge", "canvas_5");
document.getElementById("button_5").onclick = () => set_state("erase_edge", "canvas_5");
document.getElementById("button_6").onclick = () => math_eval_page("@answer_6", "@calc_6");
enter_button("@answer_6", "button_6");
document.getElementById("button_7").onclick = () => math_eval_page("@answer_7", "@calc_7");
enter_button("@answer_7", "button_7");
document.getElementById("button_8").onclick = () => math_eval_page("@answer_8", "@calc_8");
enter_button("@answer_8", "button_8");
document.getElementById("button_9").onclick = () => grade();
document.getElementById("button_10").onclick = () => download_file("@output", "M9");
document.getElementById("button_11").onclick = () => clipboard("@output");
document.getElementById("button_12").onclick = () => load_ans_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: July 23, 2021 at 6:08 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S21.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540S21W1.htm">Week 1 </a></li>
<li><a href="CS540S21W2.htm">Week 2 </a></li>
<li><a href="CS540S21W3.htm">Week 3 </a></li>
<li><a href="CS540S21W5.htm">Week 5 </a></li>
<li><a href="CS540S21W6.htm">Week 6 </a></li>
<li><a href="CS540S21W7.htm">Week 7 </a></li>
</ul>
<li><a href="CS540S21W4.htm">Midterm </a></li>
<li><a href="CS540S21W8.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>

