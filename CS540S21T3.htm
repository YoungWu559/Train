<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.3614583834765317" type="module" defer></script>
<script src="CS540.js?0.8182010619819833" type="module" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2021</h1>
</div> 
<div id="content">

<script type="module"> import {m3s21} from "./CS540.js"; m3s21() </script> <br>
<script type="module"> import {expand_all} from "./YJS.js"; expand_all() </script> <br>
Prev: <a href="CS540S21T2.htm">M2</a> Next: <a href="CS540S21T4.htm">M4</a> <br>
Back to week 1 page: <a href="CS540S21W1.htm">Link</a> <br>
<br>
<h2><font color="red"> Warning: this is a replica of the homework page for testing purposes, please use <a href="CS540S21M3.htm">M3</a> for homework submission. </font><br></h2>
<br>
<h2>T3 Written (Math) Problems</h2>
&bull; Enter your ID (the wisc email ID without @wisc.edu) here: <input type="text" id="id" value="test" size="20"> and click <button id="button_0">Confirm</button> (or hit enter key) <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <span hidden id="assignment">m3</span> <br>
&bull; The same ID should generate the same set of questions. Your answers are not saved when you close the browser. You could print the page: <button id="button_1">Print</button>, solve the problems, then enter all your answers at the end. <br>
&bull; Please do not refresh the page: your answers will not be saved. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
<h2>Question 1</h2>
<span id="p1"></span> <br>
<h2>Question 2</h2>
<span id="p2"></span> <br>
<h2>Question 3</h2>
<span id="p3"></span> <br>
<h2>Question 4</h2>
<span id="p4"></span> <br>
<h2>Question 5</h2>
<span id="p5"></span> <br>
<h2>Question 6</h2>
<span id="p6"></span> <br>
<h2>Question 7</h2>
<span id="p7"></span> <br>
<h2>Question 8</h2>
<span id="p8"></span> <br>
<h2>Question 9</h2>
<span id="p9"></span> <br>
<h2>Question 10</h2>
<span id="p10"></span> <br>
<div id="q1">
&bull; [<span id="total_1">2</span> points] Let the input \(x \in \mathbb{R}\). Thus the input layer has a single \(x\) input. The network has 5 hidden layers. Each hidden layer has 10 units. The output layer has a single unit and outputs \(y \in \mathbb{R}\). Between layers, the network is fully connected. All units in the network have a bias input. All units are linear units, namely the activation function is the identity function \(a = g\left(z\right) = z\), while \(z = w^{T} x + b\) is a linear combination of all inputs to that unit (including the bias). Which functions can this network compute? <br>
<details>
<summary>Hint</summary>
See Fall 2017 Final Q19, Spring 2017 Final Q4. Combination of linear units can still only compute linear functions. We need non-linear activation functions in order for neural networks to approximate any continuous function. <br>
</details>
&bull; Choices: <br>
<input type="checkbox" id="answer1_1" name = "none" value = "answer1_1"> <span id="choice1_1"></span> <br>
<input type="checkbox" id="answer2_1" name = "none" value = "answer2_1"> <span id="choice2_1"></span> <br>
<input type="checkbox" id="answer3_1" name = "none" value = "answer3_1"> <span id="choice3_1"></span> <br>
<input type="checkbox" id="answer4_1" name = "none" value = "answer4_1"> <span id="choice4_1"></span> <br>
<input type="checkbox" id="answer5_1" name = "none" value = "answer5_1"> <span id="choice5_1"></span> <br>
<input type="checkbox" id="answer6_1" name = "none" value = "answer6_1"> None of the above <br>
</div>
<div id="q2">
&bull; [<span id="total_2">1</span> points] A binary classifier is trained on a training set, and the resulting classifier is: \(\hat{y} = 1\) if \(a x_{1} + b x_{2} + c \geq&nbsp; 0\) and \(\hat{y} = 0\) otherwise, and tested its performance on a separate test set. The accuracy of the classifier is <span id="acc_2"></span>. What is accuracy if the flipped classifier (\(\hat{y} = 1\) if \(a x_{1} + b x_{2} + c < 0\) and \(\hat{y} = 0\) otherwise) is used? <br>
<details>
<summary>Hint</summary>
See Fall 2017 Final Q21. Accuracy is the number of correct predictions divided by the total number of test instances. <br>
</details>
&bull; Answer: <input type="text" id="answer_2" value="" size="20">. <button id="button_2">Calculate</button> <span id="calc_2"></span> <br>
</div>
<div id="q3">
&bull; [<span id="total_3">2</span> points] A test set \(\left(x_{1}, y_{1}\right), ..., \left(x_{100}, y_{100}\right)\) contains labels \(y_{i}\) = <span id="y_3"></span> for \(i = 1, ..., 100\). A classifier simply predicts <span id="p_3"></span> all the time (the labels are +1 and -1). What is this classifier's test accuracy? <br>
<details>
<summary>Hint</summary>
See Fall 2014 Final Q4, Fall 2010 Final Q1. Write down the first few labels say \(i = 1, 2, 3, 4\) to see the pattern. <br>
</details>
&bull; Answer: <input type="text" id="answer_3" value="" size="20">. <br>
</div>
<div id="q4">
&bull; [<span id="total_4">3</span> points] The sigmoid function in a neural network is defined as \(g(x) = \dfrac{1}{1 + e^{-x}}\). There is an another activation function defined as \(h(x)\) = <span id="h_4"></span>. If \(h(x) = a \cdot&nbsp; g\left(b \cdot&nbsp; x\right) + c\), write down the values of \(a, b, c\) (constants, they cannot be functions of \(x\)). <br>
<details>
<summary>Hint</summary>
See Fall 2017 Final Q23. Some relations that may be useful: \(1 - \dfrac{1}{1 + e^{-x}} = \dfrac{e^{-x}}{1 + e^{-x}}\) and \(\dfrac{e^{x}}{e^{x} + e^{-x}} = \dfrac{1}{1 + e^{-2 x}}\). <br>
</details>
&bull; Answer (comma separated vector): <input type="text" id="answer_4" value="" size="20">. <br>
</div>
<div id="q5">
&bull; [<span id="total_5">2</span> points] In a three-layer (fully connected) neural network, the first layer contains <span id="u1_5"></span> sigmoid units, the second layer contains <span id="u2_5"></span> units, and the output layer contains <span id="u3_5"></span> units. The input is <span id="u0_5"></span> dimensional. How many weights plus biases does this neural network have? Enter one number. <br>
<details>
<summary>Hint</summary>
See Fall 2019 Final Q14, Fall 2013 Final Q8, Fall 2006 Final Q17, Fall 2005 Final Q17. Three-layer neural networks have one input layer (same number of units as the input dimension), two hidden layers, and one output layer (usually the same number of units as the number of classes (labels), but in case there are only two classes, the number of units can be 1). We are using the convention of calling neural networks with four layers "three-layer neural networks" because there are only three layers with weights and biases (so we don't count the input layer). The number of weights between two consecutive layers (\(m_{1}\) units in the previous layer, \(m_{2}\) units in the next layer) is \(m_{1} \cdot&nbsp; m_{2}\), and the number of biases is \(m_{2}\). <br>
</details>
&bull; Answer: <input type="text" id="answer_5" value="" size="20">. <button id="button_3">Calculate</button> <span id="calc_5"></span> <br>
</div>
<div id="q6">
&bull; [<span id="total_6">4</span> points] Fill in the missing weight below so that it computes the following function. All inputs takes value 0 or 1, and the perceptrons are linear threshold units. The first layer weight matrix is <span id="w1_6"></span>, with bias vector <span id="b1_6"></span>, and the second layer weight vector is <span id="w2_6"></span>, with bias <span id="b2_6"></span>. <br>
<table style="width:100%" border=1>
<tr>
<td>\(x_{1}\) </td>
<td> \(x_{2}\) </td>
<td> \(y\) or \(o_{1}\) <br></td>
</tr>
<tr>
<td>0 </td>
<td> 0 </td>
<td> <span id="00_6"></span> <br></td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> <span id="01_6"></span> <br></td>
</tr>
<tr>
<td>1 </td>
<td> 0 </td>
<td> <span id="10_6"></span> <br></td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> <span id="11_6"></span> <br></td>
</tr>
</table><br>
<canvas id="canvas_6" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_6_state"> </span> <br>
&bull; Note: if the weights are not shown clearly, you could move the nodes around with mouse or touch. <br>
<details>
<summary>Hint</summary>
See Fall 2010 Final Q17. There are many possible answers: the weights should not be computed using gradient descent because all other weights are fixed. The one approach is to first figure out the hidden unit values (either 0 or 1 in this case) using the given weights. Then solve the inequality: if a hidden unit \(j\) is 0, \(w^{\left(1\right)}_{1j} x_{1} + w^{\left(1\right)}_{2j} x_{2} + b_{j} < 0\), and if the hidden unit is 1, \(w^{\left(1\right)}_{1j} x_{1} + w^{\left(1\right)}_{2j} x_{2} + b_{j} \geq&nbsp; 0\); or if output is 0, \(w^{\left(2\right)}_{1} h_{1} + w^{\left(2\right)}_{2} h_{2} + b < 0\), and if the output is 1, \(w^{\left(2\right)}_{1} h_{1} + w^{\left(2\right)}_{2} h_{2} + b \geq&nbsp; 0\). <br>
</details>
&bull; Answer: <input type="text" id="answer_6" value="" size="20">. <button id="button_4">Calculate</button> <span id="calc_6"></span> <br>
</div>
<div id="q7">
&bull; [<span id="total_7">4</span> points] Fill in the missing weight below so that it computes the following function. All inputs takes value 0 or 1, and the perceptrons are linear threshold units. The first layer weight matrix is <span id="w1_7"></span>, with bias vector <span id="b1_7"></span>, and the second layer weight vector is <span id="w2_7"></span>, with bias <span id="b2_7"></span>. <br>
<table style="width:100%" border=1>
<tr>
<td>\(x_{1}\) </td>
<td> \(x_{2}\) </td>
<td> \(y\) or \(o_{1}\) <br></td>
</tr>
<tr>
<td>0 </td>
<td> 0 </td>
<td> <span id="00_7"></span> <br></td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> <span id="01_7"></span> <br></td>
</tr>
<tr>
<td>1 </td>
<td> 0 </td>
<td> <span id="10_7"></span> <br></td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> <span id="11_7"></span> <br></td>
</tr>
</table><br>
<canvas id="canvas_7" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_7_state"> </span> <br>
&bull; Note: if the weights are not shown clearly, you could move the nodes around with mouse or touch. <br>
<details>
<summary>Hint</summary>
See Fall 2010 Final Q17. There are many possible answers: the weights should not be computed using gradient descent because all other weights are fixed. The one approach is to first figure out the hidden unit values (either 0 or 1 in this case) using the given weights. Then solve the inequality: if a hidden unit \(j\) is 0, \(w^{\left(1\right)}_{1j} x_{1} + w^{\left(1\right)}_{2j} x_{2} + b_{j} < 0\), and if the hidden unit is 1, \(w^{\left(1\right)}_{1j} x_{1} + w^{\left(1\right)}_{2j} x_{2} + b_{j} \geq&nbsp; 0\); or if output is 0, \(w^{\left(2\right)}_{1} h_{1} + w^{\left(2\right)}_{2} h_{2} + b < 0\), and if the output is 1, \(w^{\left(2\right)}_{1} h_{1} + w^{\left(2\right)}_{2} h_{2} + b \geq&nbsp; 0\). <br>
</details>
&bull; Answer: <input type="text" id="answer_7" value="" size="20">. <button id="button_5">Calculate</button> <span id="calc_7"></span> <br>
</div>
<div id="q8">
&bull; [<span id="total_8">1</span> points] You want to design a neural network with sigmoid units to predict the academic role from his webpage. Possible roles are "professor" (label 0), "student" (label 1), "staff" (label 2). Suppose each person can take on only one of these roles at the same time. The neural network uses one-hot encoding, label 0 is encoded by \(\begin{bmatrix} 1 \\ 0 \\ 0 \end{bmatrix}\), label 1 is encoded by \(\begin{bmatrix} 0 \\ 1 \\ 0 \end{bmatrix}\), and label 2 is encoded by \(\begin{bmatrix} 0 \\ 0 \\ 1 \end{bmatrix}\). What is the role (enter a label, not a string) if the output is <span id="out_8"></span>? <br>
<details>
<summary>Hint</summary>
See Fall 2011 Midterm Q12. It is the label corresponding to the largest output value. <br>
</details>
&bull; Answer: <input type="text" id="answer_8" value="" size="20">. <br>
</div>
<div id="q9">
&bull; [<span id="total_9">4</span> points] Given the following neural network that classifies all the training instances correctly. What are the labels (0 or 1) of the training data? The activation functions are LTU for all units: \(1_{\left\{z \geq&nbsp; 0\right\}}\). The first layer weight matrix is <span id="w1_9"></span>, with bias vector <span id="b1_9"></span>, and the second layer weight vector is <span id="w2_9"></span>, with bias <span id="b2_9"></span> <br>
<table style="width:100%" border=1>
<tr>
<td>\(x_{i1}\) </td>
<td> \(x_{i2}\) </td>
<td> \(y_{i}\) or \(o_{1}\) <br></td>
</tr>
<tr>
<td>0 </td>
<td> 0 </td>
<td> ? <br></td>
</tr>
<tr>
<td>0 </td>
<td> 1 </td>
<td> ? <br></td>
</tr>
<tr>
<td>1 </td>
<td> 0 </td>
<td> ? <br></td>
</tr>
<tr>
<td>1 </td>
<td> 1 </td>
<td> ? <br></td>
</tr>
</table><br>
<canvas id="canvas_9" width="500" height="500" style="border:1px solid #000000;"></canvas> <span hidden id="canvas_9_state"> </span> <br>
Note: if the weights are not shown clearly, you could move the nodes around with mouse or touch. <br>
<details>
<summary>Hint</summary>
See Fall 2010 Final Q17. First compute the hidden layer units: \(h_{j} = 1_{\left\{w^{\left(1\right)}_{1j} x_{1} + w^{\left(1\right)}_{2j} x_{2} + b_{j} \geq&nbsp; 0\right\}}\), then compute the outputs (which are equal to the training data labels): \(y = o_{1} = 1_{\left\{w^{\left(2\right)}_{1} h_{1} + w^{\left(2\right)}_{2} h_{2} + b \geq&nbsp; 0\right\}}\). Repeat the computations for \(\left(x_{1}, x_{2}\right) = \left(0, 0\right), \left(0, 1\right), \left(1, 0\right), \left(1, 1\right)\). <br>
</details>
&bull; Answer (comma separated vector): <input type="text" id="answer_9" value="" size="20">. <button id="button_6">Calculate</button> <span id="calc_9"></span> <br>
</div>
<div id="q10">
&bull; [<span id="total_10">1</span> points] Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the questions that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
</div>
<br>
<h2>Grade</h2>
<button id="button_7">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** ***** <br>
<br>
<textarea id="output" rows="4" cols="40"></textarea> <br>
&bull; You could save the text in the above text box to a file using the button <button id="button_8">Download</button> or copy and paste it into a file yourself <button id="button_9">Copy</button>. <br>
&bull; You could load your answers from the text (or txt file) in the text box below using the button <button id="button_10">Load</button>. The first two lines should be "##m: 3" and "##id: your id", and the format of the remaining lines should be "##1: your answer to question 1" newline "##2: your answer to question 2", etc. Please make sure that your answers are loaded correctly before submitting them. <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
<script type="module"> 
import {enter_button, gen_questions, math_eval_page, grade, download_file, clipboard, load_ans_page, read_file} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
enter_button("@id", "button_0");
document.getElementById("button_1").onclick = () => window.print();
document.getElementById("button_2").onclick = () => math_eval_page("@answer_2", "@calc_2");
enter_button("@answer_2", "button_2");
document.getElementById("button_3").onclick = () => math_eval_page("@answer_5", "@calc_5");
enter_button("@answer_5", "button_3");
document.getElementById("button_4").onclick = () => math_eval_page("@answer_6", "@calc_6");
enter_button("@answer_6", "button_4");
document.getElementById("button_5").onclick = () => math_eval_page("@answer_7", "@calc_7");
enter_button("@answer_7", "button_5");
document.getElementById("button_6").onclick = () => math_eval_page("@answer_9", "@calc_9");
enter_button("@answer_9", "button_6");
document.getElementById("button_7").onclick = () => grade();
document.getElementById("button_8").onclick = () => download_file("@output", "M3");
document.getElementById("button_9").onclick = () => clipboard("@output");
document.getElementById("button_10").onclick = () => load_ans_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: July 23, 2021 at 6:08 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S21.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540S21W1.htm">Week 1 </a></li>
<li><a href="CS540S21W2.htm">Week 2 </a></li>
<li><a href="CS540S21W3.htm">Week 3 </a></li>
<li><a href="CS540S21W5.htm">Week 5 </a></li>
<li><a href="CS540S21W6.htm">Week 6 </a></li>
<li><a href="CS540S21W7.htm">Week 7 </a></li>
</ul>
<li><a href="CS540S21W4.htm">Midterm </a></li>
<li><a href="CS540S21W8.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>

