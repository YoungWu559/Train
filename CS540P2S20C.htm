<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.8426056317767093" type="model" defer></script>
<script src="CS540.js?0.3664063435474407" type="model" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2020 Campus Section</h1>
</div> 
<div id="content">
<script type="module"> import {p2s20e} from "./CS540.js"; p2s20e() </script> <br>
<a href="CS540P1S20C.htm">Previous: P1</a>, <a href="CS540P3S20C.htm">Next: P3</a> <br>
<br>
Back to week 2 page: <a href="CS540W2S20C.htm">Link</a> <br>
<br>
<script src="wisconsin.js"></script>
Official Due Date: June 21 <br>
<br>
<h2>Programming Problem Instruction</h2>
&bull; Enter your ID here: <input type="text" id="id" value="" size="20"> and click <button id="button_0">Confirm</button> <span hidden id="questions">1,2,3,4,5,6,7,8,9,10</span> <br>
&bull; The same ID should generate the same set of parameters. Your answers are not saved when you close the browser. You could either copy and paste your console output into the text boxes or print your output to text files (.txt) and load them using the button above the text boxes. <br>
&bull; Please report any bugs on Piazza. <br>
<br>
<h2><span id="id_warning"><font color="red"> Warning: please enter your ID before you start! </font></span></h2>
<br>
&bull; (Introduction) In this programming homework, you will build decision stumps and a decision tree to diagnose whether a patient has some disease based on their symptoms and medical test results. Unfortunately, we do not have a nice dataset on COVID-19, so we will use the Wisconsin Breast Cancer dataset. Your models will read in integer-valued patient data and output a diagnosis of whether the patient has breast cancer. <br>
<br>
&bull; (Part 1) Go to the website: <a href="https://archive.ics.uci.edu/ml/datasets/breast+cancer+wisconsin+%28original%29" target="_blank">Dataset</a>, click on "Data Folder" and download "breast-cancer-wisconsin.data". Read the dataset description to figure out which variables are features and which variable is the label. <br>
&bull; Hint: there are lines containing "?", you should be careful when parsing them into the feature matrix. <br>
<br>
The list of variables is copied below: <br>
1. Sample code number: id number <br>
2. Clump Thickness: 1 - 10 <br>
3. Uniformity of Cell Size: 1 - 10 <br>
4. Uniformity of Cell Shape: 1 - 10 <br>
5. Marginal Adhesion: 1 - 10 <br>
6. Single Epithelial Cell Size: 1 - 10 <br>
7. Bare Nuclei: 1 - 10 <br>
8. Bland Chromatin: 1 - 10 <br>
9. Normal Nucleoli: 1 - 10 <br>
10. Mitoses: 1 - 10 <br>
11. Class: (2 for benign, 4 for malignant) <br>
<br>
&bull; (Part 1) Train a binary decision stump (decision tree with depth 1) using the following feature: <span id="var_0"></span> (indexed according to the above list). Report the counts and the information gain. <br>
&bull; Hint: since the features are integer-valued, you could either try all binrary splits and find the one with the maximum information gain, or you could use the real-valued decision tree learning algorithm discussed in the lecture. <br>
<br>
&bull; (Part 2) Train a binary decision tree using the following features: <span id="vars_0"></span> (indexed according to the same list). Report the tree using the following format: <br>
<textarea id="example_0" rows="2" cols="20"></textarea> <br>
&bull; Note: make sure you only use "x? <= integer" as the condition and you only return "2" or "4". Spaces do not matter. <br>
&bull; Hint: you should not split according to the order in the list of features, you still have to find the feature (in the list) corresponding to the max information gain at each split. <br>
&bull; Hint: use any tie breaking rule you like for comparing information gain and finding the majority label. <br>
&bull; Important hint: you should stop splitting and use the majority label if maximum information gain is 0. <br>
<br>
&bull; (Part 2) Classify the following patients using your tree. This is the test set. <br>
<textarea id="test_0" rows="2" cols="20"></textarea> <br>
You can either use the <button id="button_1">Download</button> button to download a text file, or copy and paste from the text box into Excel or a CSV file. Please do not change the content of the text box. <br>
<br>
&bull; (Part 2) Prune the tree so that the maximum depth is <span id="depth_0"></span>. The root is at depth 0. You could do this with or without a validation set. <br>
<br>
<h2>Submission</h2>
<h2>Question 1 [<span id="total_1">1</span> points]</h2>
&bull; Enter the total number of positive and negative instances in the training set (two integers, comma-separated, in the order, benign, malignant). <br>
&bull; Answer: <input type="text" id="answer_1" value="" size="20">. <br>
<br>
<h2>Question 2 [<span id="total_2">2</span> points]</h2>
&bull; Enter the initial entropy at the root before the split (one number, rounded to 4 decimal places). <br>
&bull; Answer: <input type="text" id="answer_2" value="" size="20">. <br>
<br>
<h2>Question 3 [<span id="total_3">1</span> points]</h2>
&bull; For the decision stump (Part 1), enter the number of positive and negative instances in the training set above and below the threshold (four integers, comma-separated, in the order: above-benign, below-benign, above-malignant, below-malignant). <br>
&bull; Answer: <input type="text" id="answer_3" value="" size="20">. <br>
<br>
<h2>Question 4 [<span id="total_4">2</span> points]</h2>
&bull; For the decision stump (Part 1), enter the information gain after the split (one number, rounded to 4 decimal places). <br>
&bull; Answer: <input type="text" id="answer_4" value="" size="20">. <br>
<br>
<h2>Question 5 [<span id="total_5">5</span> points]</h2>
&bull; (tree_full) Input the binary decision tree in the format described previously. <br>
<input type="file", id="tree_full_input", accept='text/plain'><br><textarea id="tree_full"></textarea> <br>
<span hidden id="answer_5"></span> <br>
<br>
<h2>Question 6 [<span id="total_6">2</span> points]</h2>
&bull; Enter the maximum depth of this tree. The root is at depth 0. For example, if you only have "if ..., else ...", you should enter 1. <br>
&bull; Answer: <input type="text" id="answer_6" value="" size="20"> <br>
<br>
<h2>Question 7 [<span id="total_7">15</span> points]</h2>
&bull; (label_full) Input the class labels on the test set (200 integers, either 2 or 4, comma separated, in one line). <br>
<input type="file", id="label_full_input", accept='text/plain'><br><textarea id="label_full"></textarea> <br>
<span hidden id="answer_7"></span> <br>
<br>
<h2>Question 8 [<span id="total_8">5</span> points]</h2>
&bull; (tree_pruned) Input the pruned binary decision tree in the format described previously. <br>
<input type="file", id="tree_pruned_input", accept='text/plain'><br><textarea id="tree_pruned"></textarea> <br>
<span hidden id="answer_8"></span> <br>
<br>
<h2>Question 9 [<span id="total_9">15</span> points]</h2>
&bull; (label_pruned) Input the class labels on the test set (200 integers, either 2 or 4, comma separated, in one line). <br>
<input type="file", id="label_pruned_input", accept='text/plain'><br><textarea id="label_pruned"></textarea> <br>
<span hidden id="answer_9"></span> <br>
<br>
<h2>Question 10 [<span id="total_10">1</span> points]</h2>
&bull; Please enter any comments and suggestions including possible mistakes and bugs with the questions and the auto-grading, and materials relevant to solving the question that you think are not covered well during the lectures. If you have no comments, please enter "None": do not leave it blank. <br>
&bull; Answer: <textarea id="answer_10" rows="2" cols="20"></textarea>. <br>
<br>
<h2>Grade</h2>
<button id="button_2">Grade</button> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
<span id="comment"></span> <br>
&nbsp;***** ***** ***** ***** *****&nbsp; <br>
&bull; Warning: grading may take around 5 seconds. Please be patient and do not click "Grade" multiple times. <br>
<br>
&bull; Please copy and paste the text between the *****s (not including the *****s) and submit it on Canvas, P2. <br>
&bull; Please submit your code and outputs on Canvas, P2S. <br>
&bull; You could also save your output as a single text file using the button <button id="button_3">Download</button> and submit this to P2S (with your code). <br>
&bull; Warning: the load button does not function properly for all questions, please recheck everything after you load. You could load your answers using the button <button id="button_4">Load</button> from the text field: <br>
<input type="file", id="loading_input", accept='text/plain'><br><textarea id="loading"></textarea> <br>
&bull; Saving and loading may take around 5 seconds. Please be patient and do not click the buttons multiple times. <br>
<br>
<h2>Hints and Solutions (frequently updated)</h2>
&bull; Questions 1 to 4 correspond to Part 1 and Questions 5 to 9 correspond to Part 2. <br>
&bull; You should split the same feature multiple times with different thresholds. <br>
&bull; You should stop splitting and use the majority label if maximum information gain is 0. <br>
&bull; You should not store the tree in an array (i.e not what I did in JavaScript), you should define a node class to store the variable names and thresholds, and create a tree with the nodes. If this explanation is not clear, you could read the notes from Professor Caraza-Harter's CS320: <a href="https://tyler.caraza-harter.com/cs320/s20/reading/lec-11-search-trees.html" target="_blank">Link</a>. In general, his course webpage is an excellent resource for all the programming tricks we are going to use in this course: <a href="https://tyler.caraza-harter.com/cs320/s20/schedule.html" target="_blank">Link</a>. <br>
&bull; The slides containing the main algorithm with important formulas is Lecture 6 Slides 15, 16, 17, 19. <br>
&bull; The homework instructions from last year that are not that great: <a href="http://pages.cs.wisc.edu/~yw/CS540/CS540_P3.pdf" target="_blank">Link</a>. <br>
&bull; A sample solution in Java and Python is posted below. <br>
Important notes:&nbsp; <br>
(1) Pruning is not done. You may need to prune the tree to get a high enough accuracy to pass the auto-grading. <br>
(2) You need to figure out which variables to output yourself. The outputs from the solution are use for debugging purposes only. <br>
(3) You are allowed to copy and use parts of the TA's solution without attribution. You are allowed to use code from other people and from the Internet, but you must state in the comments clearly where they come from! <br>
<br>
Java code by Ainur Ainabekova: <a href="https://git.doit.wisc.edu/AINABEKOVA/cs-540_summer2020/-/tree/master/P2" target="_blank">Link</a> <br>
Python code by Hugh Liu: <a href="https://git.doit.wisc.edu/YLIU785/ta540_2020summer/-/tree/master/P2_student_python" target="_blank">Link</a>. <br>
<script type="module"> 
import {enter_button, gen_questions, download_file, read_file, grade, download_blanks, load_blanks_page} from "./YJS.js";
document.getElementById("button_0").onclick = () => gen_questions();
document.getElementById("button_1").onclick = () => download_file("@test_0", "test");
document.getElementById("tree_full_input").onchange = () => read_file(event, "tree_full");
document.getElementById("label_full_input").onchange = () => read_file(event, "label_full");
document.getElementById("tree_pruned_input").onchange = () => read_file(event, "tree_pruned");
document.getElementById("label_pruned_input").onchange = () => read_file(event, "label_pruned");
document.getElementById("button_2").onclick = () => grade();
document.getElementById("button_3").onclick = () => download_blanks("@id;@answer_1;@answer_2;@answer_3;@answer_4;@tree_full;@answer_6;@label_full;@tree_pruned;@label_pruned;@answer_10", "P2");
document.getElementById("button_4").onclick = () => load_blanks_page("@loading");
document.getElementById("loading_input").onchange = () => read_file(event, "loading");
</script><br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: May 27, 2021 at 10:28 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S20C.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540W1S20C.htm">Week 1 </a></li>
<li><a href="CS540W2S20C.htm">Week 2 </a></li>
<li><a href="CS540W3S20C.htm">Week 3 </a></li>
<li><a href="CS540W5S20C.htm">Week 5 </a></li>
<li><a href="CS540W6S20C.htm">Week 6 </a></li>
<li><a href="CS540W7S20C.htm">Week 7 </a></li>
</ul>
<li><a href="CS540W4S20C.htm">Midterm </a></li>
<li><a href="CS540W8S20C.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>
