<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-34711826-1', 'auto');
  ga('send', 'pageview');
</script>
<script src="YJS.js?0.02359647501533324" type="model" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeric/1.2.6/numeric.min.js"></script>
<script src="https://unpkg.com/mathjs@6.1.0/dist/math.min.js"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<title>Young Wu's Homepage</title>
<link rel="shortcut icon" href="favicon.ico">
<link rel="stylesheet" href="style540.css" type="text/css">
</head>
<body>
<div id="masthead">
<h1 id="siteName">CS540 Summer 2019</h1>
</div> 
<div id="content">
<a href="CS540W1S19.htm">Prev: W1</a> ; <a href="CS540W3S19.htm">Next: W3</a> <br>
<br>
<h2>Lecture Note</h2>
&bull; Slides <br>
Lecture 3: <a href="CS540/CS540_Lecture_3_P.pdf">Slides</a>, <a href="CS540/CS540_Lecture_3_C.pdf">With Quiz</a> <br>
Lecture 4: <a href="CS540/CS540_Lecture_4_P.pdf">Slides</a>, <a href="CS540/CS540_Lecture_4_C.pdf">With Quiz</a> <br>
Annotated Lecture 3 Section 1: <a href="CS540/CS540_Lecture_3_C1.pdf">Slides</a> <br>
Annotated Lecture 4 Section 1: <a href="CS540/CS540_Lecture_4_C1.pdf">Slides</a> <br>
Annotated Week 1 Section 2: <a href="CS540/CS540_Lecture_3_C2.pdf">Part I</a>, <a href="CS540/CS540_Lecture_4_C2.pdf">Part II</a> <br>
<br>
&bull; Websites <br>
(from week 1) Gradient Descent. <a href="https://www.benfrederickson.com/numerical-optimization/" target="_blank">Link</a> <br>
Neural Network: <a href="https://playground.tensorflow.org/" target="_blank">Link</a> <br>
Neural Network Videos by Grant Sanderson: <a href="https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi" target="_blank">Playlist</a> (Thanks Dan Drake for the recommendation) <br>
Stochastic Gradient Descent: <a href="https://imaddabbura.github.io/post/gradient_descent_algorithms/" target="_blank">Link</a> <br>
Overfitting: <a href="https://en.wikipedia.org/wiki/Overfitting" target="_blank">Link</a> <br>
<img src="CS540/v1.jpg" alt="Overfitting" width="510" height="268" onmouseover="this.src='CS540/v2.jpg';" onmouseout="this.src='CS540/v1.jpg';"/><br>
<br>
&bull; YouTube videos <br>
How to construct XOR network? <a href="https://youtu.be/fI0nu_IRznw" target="_blank">Link</a> <br>
How derive 2-layer neural network gradient descent step? <a href="https://youtu.be/6VhOUe3dGZ4" target="_blank">Link</a> <br>
How derive multi-layer neural network gradient descent induction step? <a href="https://youtu.be/dWrsHofzIVY" target="_blank">Link</a> <br>
Comparison between L1 and L2 regularization. <a href="https://youtu.be/WJgBPZIX5Uo" target="_blank">Link</a> <br>
Example (Quiz): Cross validation accuracy <a href="https://youtu.be/EKzUl7tbpzo" target="_blank">Link</a> <br>
<br>
<h2>Written (Math) Problems</h2>
Submit on Canvas: <a href="CS540/CS540_M2.pdf">PDF</a> <br>
Please submit a file named "comments.txt", and in the first line, a numerical grade 1, 1.5, or 2 for your whole homework (not individual questions). <br>
An example of Q3 (induction) is done in the "multi-layer neural network" video under Lectures -> YouTube videos. Try to work out the general case for arbitrary w^(l)_ij. <br>
<br>
<h2>Programming Problem</h2>
&bull; Short Instruction <br>
(0) (Optional) Start by building a two-layer neural network (with a single hidden layer, number of hidden units = number of input units) on the training data from week 1 (handwritten digits, you can select a smaller subset of around 400 images to make the training process faster), and test it on the test sets to make sure your neural network works. <br>
(1) Download the FEI Face Database from <a href="https://fei.edu.br/~cet/facedatabase.html" target="_blank">FEI</a>. Download one of the aligned or normalized set of images (both part 1 and part 2): any of the three is okay. 400 images in total. <br>
(2) Resize the images (36 x 26 should be enough, you can use large or smaller images), compute the pixel intensities, and store them in a vector (one row of matrix x). The vector y is whether the facial expression is not happy (#a.jpg) or happy (#b.jpg). <br>
(3) Split the dataset into a training set and a test set based on your wisc ID:&nbsp; <br>
Type in your ID: <input type="text", id="id"> <button onclick="get()">GO</button><br>
<span id="out">Your test set contains the images: </span><br>&nbsp; <br>
<span id="test">Your training set contains the remaining 360 images. </span><br>&nbsp; <br>
<script>
function get() <br>
{ <br>
&nbsp; let id = document.getElementById("id").value; <br>
&nbsp; let len = id.length; <br>
&nbsp; if (len >= 1) <br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp; let a = id.charCodeAt(len - 1) % 10 * 2; <br>
&nbsp;&nbsp;&nbsp; document.getElementById("out").innerHTML = "Your test set contains the images: (" + a + "1a, " + a + "1b) to (" + (a + 2) + "0a, " + (a + 2) + "0b)"+ "."; <br>
&nbsp; } <br>
} <br>
</script>
(4) Train a two-layer neural network (with a single hidden layer) to classify whether the facial expression in the image is happy or not. The number of hidden units should be equal to the number of input units. You can use any cost function and activation function. The ones use in the lecture slides and the hint file is the squared error cost function plus the sigmoid (logistic) activation function. You can use batch, mini-batch, or stochastic gradient descent, whichever is faster.&nbsp; <br>
(*) You are not allowed to use machine learning packages such as scikit-learn, OpenCV, Keras, PyTorch ... <br>
<br>
&bull; Files to submit <br>
(1) <u><b>hidden.png</b></u> or <u><b>hidden.jpg</b></u> etc. shows the hidden layer activation for the first image in your test set. <br>
Input the image size (height x width): <input type="text", id="height", value="3", size="5"> x <input type="text", id="width", value="3", size="5"><br>
Input the activation values (comma seperated, each number between 0 and 1, right click to save the png image file): <input type="text", id="image", value="0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9"> <button onclick="clean()">Clear</button> <button onclick="draw()">GO</button>
<canvas id="canvas" width="300" height="300" style="border:1px solid #000000;"></canvas><br>
<script>
function clean() <br>
{ <br>
&nbsp; document.getElementById("image").value = ""; <br>
} <br>
function draw() <br>
{ <br>
&nbsp; let canvas = document.getElementById("canvas"); <br>
&nbsp; let context = canvas.getContext("2d"); <br>
&nbsp; context.clearRect(0, 0, 300, 300); <br>
&nbsp; let image = document.getElementById("image").value; <br>
&nbsp; let width = parseInt(document.getElementById("width").value); <br>
&nbsp; let height = parseInt(document.getElementById("height").value); <br>
&nbsp; let split = image.split(","); <br>
&nbsp; let gray = 0; <br>
&nbsp; let dx = 300 / width; <br>
&nbsp; let dy = 300 / height; <br>
&nbsp; let dd = Math.min(dx, dy) <br>
&nbsp; let size = Math.min(split.length, width * height); <br>
&nbsp; canvas.width = dd * width; <br>
&nbsp; canvas.height = dd * height; <br>
&nbsp; for (let i = 0; i < size; i ++) <br>
&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gray = Number(split[i]) * 255; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.fillStyle = "rgb(" + gray + "," + gray + "," + gray + ")"; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.fillRect(dd * (i % width), dd * Math.floor(i / width), dd, dd); <br>
&nbsp; } <br>
} <br>
window.onload = function() {draw();}; <br>
</script>
(2) <u><b>output.txt</b></u> contains the classification of the expression in your test set. They should be 40 lines of 0s and 1s, one number per line. If your classification is perfect, the output should be 0, 1, 0, 1 ..., one per line. <br>
(3) <u><b>comments.txt</b></u> contains information on how to run your program, in particular, the names of the data files are required. <br>
(4) code. <br>
<br>
&bull; Things to try <br>
(1) Experiment with different hyperparameters. <br>
(2) Repeat the experiments with different (random) initial weights.&nbsp; <br>
(3) (Not required) Try L1 or L2 regularizers. <br>
(4) Find and look at the images that are classified incorrectly. <br>
<br>
&bull; Longer Instruction <br>
More (nonessential) details and hints: <a href="CS540/CS540_P2.pdf">PDF</a>. <br>
Shang and Erik posted their code to convert images to csv files on Piazza: <a href="https://piazza.com/class/jtu761dc3z72ic?cid=57" target="_blank">in Python</a> written by Shang and <a href="https://piazza.com/class/jtu761dc3z72ic?cid=64" target="_blank">in Java</a> written by Erik. It's okay to use the code to preprocess the images, but make sure you mention it in the comments file that you are using preprocessed data. Also, please do NOT copy and submit their code! <br>
<br>
&bull; TAs' Solution <br>
(1) Java: <a href="https://git.doit.wisc.edu/SONGDECHAKRA/CS540-SU19" target="_blank">Link</a> written by Tan <br>
(2) Python: <a href="https://git.doit.wisc.edu/DANDI.CHEN/cs540_2019summer/tree/master/hw2" target="_blank">Link</a> written by Dandi <br>
The expressions for activation and cost functions are removed from both solutions since you can choose any one you like: please see the formulas in the hints file <a href="CS540/CS540_P2.pdf">PDF</a> if you want squared error cost with logistic activation. <br>
Important note: You are not allowed to copy any code from the solution. <a href="https://theory.stanford.edu/~aiken/moss/" target="_blank">MOSS</a> will be used check for code similarity: changing just variable names and the spacing etc is still considered cheating. You can read and learn what the solution is doing but you MUST write all code yourself. The deadline for resubmission without 50 percent penalty is June 30. <br>
<br>
<br>
<br>
<br>
<br>
<font color="grey" size = 2> Last Updated: November 10, 2019 at 9:39 PM</font><br>
<br>
</div>
<div id="primarynavarea">
<ul id="primarynav">
<li><a href="CS540S19.htm"><span class="secondcolor"><strong>Home</strong></span></a></li>
<ul id="primarynavsub">
<li><a href="CS540W1S19.htm">Week 1 </a></li>
<li><a href="CS540W2S19.htm">Week 2 </a></li>
<li><a href="CS540W3S19.htm">Week 3 </a></li>
<li><a href="CS540W4S19.htm">Week 4 </a></li>
<li><a href="CS540W5S19.htm">Week 5 </a></li>
<li><a href="CS540W6S19.htm">Week 6 </a></li>
<li><a href="CS540W7S19.htm">Week 7 </a></li>
<li><a href="CS540W9S19.htm">Week 9 </a></li>
<li><a href="CS540W10S19.htm">Week 10 </a></li>
<li><a href="CS540W11S19.htm">Week 11 </a></li>
<li><a href="CS540W12S19.htm">Week 12 </a></li>
</ul>
<li><a href="CS540W8S19.htm">Midterm </a></li>
<li><a href="CS540W13S19.htm">Final </a></li>
</ul>
</div>
<div id="siteInfo">&nbsp;<img style="width: 191px; height: 65px;" alt="" src="image003.png">
</div>
</body>
</html>
